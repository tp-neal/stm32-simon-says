
getting_started.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08002170  08002170  00003170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002364  08002364  00004060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002364  08002364  00003364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800236c  0800236c  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800236c  0800236c  0000336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002370  08002370  00003370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002374  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000060  080023d4  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080023d4  00004228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022d1  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000074f  00000000  00000000  00006361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00006ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000197  00000000  00000000  00006ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025316  00000000  00000000  00006e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002add  00000000  00000000  0002c195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e26c8  00000000  00000000  0002ec72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011133a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000119c  00000000  00000000  00111380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002158 	.word	0x08002158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002158 	.word	0x08002158

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000274:	f3bf 8f4f 	dsb	sy
}
 8000278:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800027a:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <__NVIC_SystemReset+0x24>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000282:	4904      	ldr	r1, [pc, #16]	@ (8000294 <__NVIC_SystemReset+0x24>)
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <__NVIC_SystemReset+0x28>)
 8000286:	4313      	orrs	r3, r2
 8000288:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800028a:	f3bf 8f4f 	dsb	sy
}
 800028e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <__NVIC_SystemReset+0x20>
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	05fa0004 	.word	0x05fa0004

0800029c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b0b6      	sub	sp, #216	@ 0xd8
 80002a0:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	// Configure Ports
	GPIO_TypeDef *ports[] = { GPIOA, GPIOB, GPIOC };
 80002a2:	4a73      	ldr	r2, [pc, #460]	@ (8000470 <main+0x1d4>)
 80002a4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80002a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Port_Collection_t port_group = { .ports = ports, .count = sizeof(ports) / sizeof(ports[0]) };
 80002ae:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80002b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80002b6:	2303      	movs	r3, #3
 80002b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

	/*** IMPORTANT: The index of an LED should be identical to the index of its associated button in their respective arrays ***/

	// Configure LEDSs
	Pin_Info_t red_led = { RED_LED_PORT, RED_LED_PIN };
 80002bc:	4a6d      	ldr	r2, [pc, #436]	@ (8000474 <main+0x1d8>)
 80002be:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80002c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c6:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t yellow_led = { YELLOW_LED_PORT, YELLOW_LED_PIN };
 80002ca:	4a6b      	ldr	r2, [pc, #428]	@ (8000478 <main+0x1dc>)
 80002cc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80002d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d4:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t green_led = { GREEN_LED_PORT, GREEN_LED_PIN };
 80002d8:	4a68      	ldr	r2, [pc, #416]	@ (800047c <main+0x1e0>)
 80002da:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80002de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e2:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t blue_led = { BLUE_LED_PORT, BLUE_LED_PIN };
 80002e6:	4a66      	ldr	r2, [pc, #408]	@ (8000480 <main+0x1e4>)
 80002e8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t leds[] = { red_led, yellow_led, green_led, blue_led };
 80002f4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80002f8:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 80002fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000300:	e883 0003 	stmia.w	r3, {r0, r1}
 8000304:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000308:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800030c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000310:	e883 0003 	stmia.w	r3, {r0, r1}
 8000314:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000318:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800031c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000320:	e883 0003 	stmia.w	r3, {r0, r1}
 8000324:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000328:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800032c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000330:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Collection_t led_group = { .pins = leds, .count = sizeof(leds) / sizeof(leds[0]) };
 8000334:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000338:	67bb      	str	r3, [r7, #120]	@ 0x78
 800033a:	2304      	movs	r3, #4
 800033c:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Configure Buttons
	Pin_Info_t red_button = { RED_BUTTON_PORT, RED_BUTTON_PIN };
 800033e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000342:	673b      	str	r3, [r7, #112]	@ 0x70
 8000344:	2300      	movs	r3, #0
 8000346:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	Pin_Info_t yellow_button = { YELLOW_BUTTON_PORT, YELLOW_BUTTON_PIN };
 800034a:	4a4e      	ldr	r2, [pc, #312]	@ (8000484 <main+0x1e8>)
 800034c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000354:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t green_button = { GREEN_BUTTON_PORT, GREEN_BUTTON_PIN };
 8000358:	4a4b      	ldr	r2, [pc, #300]	@ (8000488 <main+0x1ec>)
 800035a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800035e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000362:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t blue_button = { BLUE_BUTTON_PORT, BLUE_BUTTON_PIN };
 8000366:	4b49      	ldr	r3, [pc, #292]	@ (800048c <main+0x1f0>)
 8000368:	65bb      	str	r3, [r7, #88]	@ 0x58
 800036a:	2300      	movs	r3, #0
 800036c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	Pin_Info_t buttons[] = { red_button, yellow_button, green_button, blue_button };
 8000370:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000374:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000380:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000384:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800038c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000390:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000394:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8000398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800039c:	e883 0003 	stmia.w	r3, {r0, r1}
 80003a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003a4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Collection_t button_group =
 80003b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80003b6:	2304      	movs	r3, #4
 80003b8:	637b      	str	r3, [r7, #52]	@ 0x34
			{ .pins = buttons, .count = sizeof(buttons) / sizeof(buttons[0]) };

	// Configure Status LEDs
	Pin_Info_t status_red_led = { STATUS_LED_RED_PORT, STATUS_LED_RED_PIN };
 80003ba:	4a35      	ldr	r2, [pc, #212]	@ (8000490 <main+0x1f4>)
 80003bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c4:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t status_green_led = { STATUS_LED_GREEN_PORT, STATUS_LED_GREEN_PIN };
 80003c8:	4a32      	ldr	r2, [pc, #200]	@ (8000494 <main+0x1f8>)
 80003ca:	f107 0320 	add.w	r3, r7, #32
 80003ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003d2:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Info_t status_leds[] = { status_red_led, status_green_led };
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80003de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	f107 0220 	add.w	r2, r7, #32
 80003ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003f2:	e883 0003 	stmia.w	r3, {r0, r1}
	Pin_Collection_t status_led_group = { .pins = status_leds, .count = sizeof(status_leds)
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	2302      	movs	r3, #2
 80003fe:	60fb      	str	r3, [r7, #12]
			/ sizeof(status_leds[0]) };

	/* Configure the system clock */
	mcu_clock_config();
 8000400:	f000 fb0e 	bl	8000a20 <mcu_clock_config>

	/* Initialize our new SysTick timer */
	systick_init();
 8000404:	f000 fc62 	bl	8000ccc <systick_init>

	/* Initialize all configured peripherals */
	gpio_init(&port_group, &led_group, &button_group, &status_led_group);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000410:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8000414:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8000418:	f000 fb8a 	bl	8000b30 <gpio_init>

	/* Seed random number generator for Simon's randomization */
	srand(get_random_seed_from_adc());
 800041c:	f000 fc92 	bl	8000d44 <get_random_seed_from_adc>
 8000420:	4603      	mov	r3, r0
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fe1c 	bl	8001060 <srand>

	/* Initalize usart protocol for debug printing */
	usart2_init();
 8000428:	f000 f838 	bl	800049c <usart2_init>

	/* The Game ---------------------------------------------------------------- */

	// Flash the lights before beginning the game
	game_display_start_sequence(&led_group);
 800042c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f8a5 	bl	8000580 <game_display_start_sequence>

	printf("++++++++++++++++++++++++ Begin ++++++++++++++++++++++++\r\n");
 8000436:	4818      	ldr	r0, [pc, #96]	@ (8000498 <main+0x1fc>)
 8000438:	f000 ffa8 	bl	800138c <puts>

	/* Begin the game */
	while (1) {

		// Simon picks the pattern to be played
		Pin_Collection_t pattern = game_generate_pattern(&led_group);
 800043c:	463b      	mov	r3, r7
 800043e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000442:	4611      	mov	r1, r2
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f8dd 	bl	8000604 <game_generate_pattern>

		// Get and validate user input
		int status = game_get_player_input(&led_group, &button_group, &pattern);
 800044a:	463a      	mov	r2, r7
 800044c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000450:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f933 	bl	80006c0 <game_get_player_input>
 800045a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

		// Check if the user passed or failed
		game_handle_status(status, &status_led_group);
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	4619      	mov	r1, r3
 8000464:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8000468:	f000 f9c2 	bl	80007f0 <game_handle_status>
	while (1) {
 800046c:	bf00      	nop
 800046e:	e7e5      	b.n	800043c <main+0x1a0>
 8000470:	080021ac 	.word	0x080021ac
 8000474:	080021b8 	.word	0x080021b8
 8000478:	080021c0 	.word	0x080021c0
 800047c:	080021c8 	.word	0x080021c8
 8000480:	080021d0 	.word	0x080021d0
 8000484:	080021d8 	.word	0x080021d8
 8000488:	080021e0 	.word	0x080021e0
 800048c:	48000800 	.word	0x48000800
 8000490:	080021e8 	.word	0x080021e8
 8000494:	080021f0 	.word	0x080021f0
 8000498:	08002170 	.word	0x08002170

0800049c <usart2_init>:

/*======================================================================================================
 * Debug Functions
 ======================================================================================================*/

static void usart2_init(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

	// Enable clock access to USART2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80004a0:	4b22      	ldr	r3, [pc, #136]	@ (800052c <usart2_init+0x90>)
 80004a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a4:	4a21      	ldr	r2, [pc, #132]	@ (800052c <usart2_init+0x90>)
 80004a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004aa:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set PA2 and PA3 to Alternate Function mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk | GPIO_MODER_MODE3_Msk);
 80004ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2UL << GPIO_MODER_MODE2_Pos);
 80004bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2UL << GPIO_MODER_MODE3_Pos);
 80004cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004da:	6013      	str	r3, [r2, #0]

	// Set the alternate function type to AF7 (USART2_TX/RX)
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 80004dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e0:	6a1b      	ldr	r3, [r3, #32]
 80004e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80004ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7UL << GPIO_AFRL_AFSEL2_Pos);
 80004ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004f0:	6a1b      	ldr	r3, [r3, #32]
 80004f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80004fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7UL << GPIO_AFRL_AFSEL3_Pos);
 80004fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000500:	6a1b      	ldr	r3, [r3, #32]
 8000502:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000506:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800050a:	6213      	str	r3, [r2, #32]

	// Configure USART2
	// Formula: SystemClock / BaudRate = 80,000,000 / 115200 = 694.44
	// Store integer part of that result into the BRR
	USART2->BRR = 694;
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <usart2_init+0x94>)
 800050e:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8000512:	60da      	str	r2, [r3, #12]

	// Enable the Transmitter (TE) and the USART itself (UE)
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_UE);
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <usart2_init+0x94>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <usart2_init+0x94>)
 800051a:	f043 0309 	orr.w	r3, r3, #9
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	40004400 	.word	0x40004400

08000534 <_write>:

/**
 * @brief  Retargets the C library printf function to the USART.
 */
int _write(int file, char *ptr, int len) {
 8000534:	b480      	push	{r7}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	e00f      	b.n	8000566 <_write+0x32>
		// Send each character to the USART2 peripheral
		while (!(USART2->ISR & USART_ISR_TXE)){
 8000546:	bf00      	nop
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <_write+0x48>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <_write+0x14>
			// Wait for transmit buffer to be empty
		}
		USART2->TDR = (uint8_t) ptr[i]; // Send the character
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	4413      	add	r3, r2
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <_write+0x48>)
 800055e:	851a      	strh	r2, [r3, #40]	@ 0x28
	for (i = 0; i < len; i++) {
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	3301      	adds	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	697a      	ldr	r2, [r7, #20]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbeb      	blt.n	8000546 <_write+0x12>
	}
	return len;
 800056e:	687b      	ldr	r3, [r7, #4]
}
 8000570:	4618      	mov	r0, r3
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40004400 	.word	0x40004400

08000580 <game_display_start_sequence>:

/*======================================================================================================
 * Gameplay Functions
 ======================================================================================================*/

static void game_display_start_sequence(Pin_Collection_t *led_group) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	for (int j = 0; j < 3; j++) {
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e032      	b.n	80005f4 <game_display_start_sequence+0x74>

		for (int i = 0; i < led_group->count; i++) {
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	e00b      	b.n	80005ac <game_display_start_sequence+0x2c>
			led_enable(led_group->pins[i]);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	4413      	add	r3, r2
 800059e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005a2:	f000 f9a7 	bl	80008f4 <led_enable>
		for (int i = 0; i < led_group->count; i++) {
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	3301      	adds	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d8ee      	bhi.n	8000594 <game_display_start_sequence+0x14>
		}
		systick_delay_ms(START_SEQUENCE_COEF);
 80005b6:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80005ba:	f000 fb9b 	bl	8000cf4 <systick_delay_ms>

		for (int i = 0; i < led_group->count; i++) {
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	e00b      	b.n	80005dc <game_display_start_sequence+0x5c>
			led_disable(led_group->pins[i]);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	4413      	add	r3, r2
 80005ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005d2:	f000 f9a3 	bl	800091c <led_disable>
		for (int i = 0; i < led_group->count; i++) {
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d8ee      	bhi.n	80005c4 <game_display_start_sequence+0x44>
		}
		systick_delay_ms(START_SEQUENCE_COEF);
 80005e6:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80005ea:	f000 fb83 	bl	8000cf4 <systick_delay_ms>
	for (int j = 0; j < 3; j++) {
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3301      	adds	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	ddc9      	ble.n	800058e <game_display_start_sequence+0xe>
	}
}
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <game_generate_pattern>:

/*
 * @breif Based on the provided pin collection, simon will pick a pattern to be played
 * @retval Chronological collection of the pins the user must play to beat Simon
 */
static Pin_Collection_t game_generate_pattern(const Pin_Collection_t *led_group) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]

	printf("---------------------- Round %d ----------------------\r\n", game_size - 2);
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <game_generate_pattern+0xac>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3b02      	subs	r3, #2
 8000614:	4619      	mov	r1, r3
 8000616:	4827      	ldr	r0, [pc, #156]	@ (80006b4 <game_generate_pattern+0xb0>)
 8000618:	f000 fe50 	bl	80012bc <iprintf>
	// Declare variables to store simons pattern
	static Pin_Collection_t pattern;
	static Pin_Info_t pattern_pins[MAX_PATTERN_SIZE];

	// Randomly select LEDs to light up
	for (int i = 0; i < game_size; i++) {
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	e027      	b.n	8000672 <game_generate_pattern+0x6e>
		int index = rand() % led_group->count;
 8000622:	f000 fd4b 	bl	80010bc <rand>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000632:	fb01 f303 	mul.w	r3, r1, r3
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]
		pattern_pins[i] = led_group->pins[index];
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	18d1      	adds	r1, r2, r3
 8000644:	4a1c      	ldr	r2, [pc, #112]	@ (80006b8 <game_generate_pattern+0xb4>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	4413      	add	r3, r2
 800064c:	460a      	mov	r2, r1
 800064e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000652:	e883 0003 	stmia.w	r3, {r0, r1}

		// Blink the led
		led_blink(pattern_pins[i], SIMON_LED_HOLD_TIME, SIMON_LED_POST_DELAY);
 8000656:	4818      	ldr	r0, [pc, #96]	@ (80006b8 <game_generate_pattern+0xb4>)
 8000658:	68f9      	ldr	r1, [r7, #12]
 800065a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800065e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000662:	00c9      	lsls	r1, r1, #3
 8000664:	4401      	add	r1, r0
 8000666:	c903      	ldmia	r1, {r0, r1}
 8000668:	f000 f96d 	bl	8000946 <led_blink>
	for (int i = 0; i < game_size; i++) {
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <game_generate_pattern+0xac>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4293      	cmp	r3, r2
 800067c:	dbd1      	blt.n	8000622 <game_generate_pattern+0x1e>
	}

	pattern.pins = pattern_pins;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <game_generate_pattern+0xb8>)
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <game_generate_pattern+0xb4>)
 8000682:	601a      	str	r2, [r3, #0]
	pattern.count = game_size;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <game_generate_pattern+0xac>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <game_generate_pattern+0xb8>)
 800068c:	605a      	str	r2, [r3, #4]

	game_size++;	// game size increases every round until max is completed
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <game_generate_pattern+0xac>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <game_generate_pattern+0xac>)
 8000698:	701a      	strb	r2, [r3, #0]

	return pattern;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a07      	ldr	r2, [pc, #28]	@ (80006bc <game_generate_pattern+0xb8>)
 800069e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a2:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000000 	.word	0x20000000
 80006b4:	080021f8 	.word	0x080021f8
 80006b8:	20000080 	.word	0x20000080
 80006bc:	200000d0 	.word	0x200000d0

080006c0 <game_get_player_input>:

static int game_get_player_input(const Pin_Collection_t *led_group,
		const Pin_Collection_t *button_group, const Pin_Collection_t *pattern) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	@ 0x38
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]

	int status = PLAYER_SUCCESS;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int s = 0;	// Simon's pattern iterator
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Retrieve input until player has finished their turn
	while (s < pattern->count) {
 80006d4:	e07e      	b.n	80007d4 <game_get_player_input+0x114>

		int active_index = -1;// index of the active led and button in their corresponding collections
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24

		// Wait for player to pick a button
		while (active_index < 0) {
 80006dc:	e028      	b.n	8000730 <game_get_player_input+0x70>
			for (int i = 0; i < button_group->count; i++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
 80006e2:	e020      	b.n	8000726 <game_get_player_input+0x66>
				if (button_is_active(button_group->pins[i])) {
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	6a3b      	ldr	r3, [r7, #32]
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	4413      	add	r3, r2
 80006ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f2:	f000 f97f 	bl	80009f4 <button_is_active>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d011      	beq.n	8000720 <game_get_player_input+0x60>
					systick_delay_ms(DEBOUNCING_DELAY);	// we add this here to prevent accidental double reads when the button voltage bounces on initial press
 80006fc:	2032      	movs	r0, #50	@ 0x32
 80006fe:	f000 faf9 	bl	8000cf4 <systick_delay_ms>
					if (button_is_active(button_group->pins[i])) {
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	6a3b      	ldr	r3, [r7, #32]
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	4413      	add	r3, r2
 800070c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000710:	f000 f970 	bl	80009f4 <button_is_active>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <game_get_player_input+0x60>
						active_index = i;
 800071a:	6a3b      	ldr	r3, [r7, #32]
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
						break;
 800071e:	e007      	b.n	8000730 <game_get_player_input+0x70>
			for (int i = 0; i < button_group->count; i++) {
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	3301      	adds	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8d9      	bhi.n	80006e4 <game_get_player_input+0x24>
		while (active_index < 0) {
 8000730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000732:	2b00      	cmp	r3, #0
 8000734:	dbd3      	blt.n	80006de <game_get_player_input+0x1e>
				}
			}
		}

		// Enable the LED while the player presses it
		led_enable(led_group->pins[active_index]);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	4413      	add	r3, r2
 8000740:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000744:	f000 f8d6 	bl	80008f4 <led_enable>
		while (button_is_active(button_group->pins[active_index])) {
 8000748:	bf00      	nop
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	4413      	add	r3, r2
 8000754:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000758:	f000 f94c 	bl	80009f4 <button_is_active>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f3      	bne.n	800074a <game_get_player_input+0x8a>
			// wait until player releases button
		}
		led_disable(led_group->pins[active_index]);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	4413      	add	r3, r2
 800076c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000770:	f000 f8d4 	bl	800091c <led_disable>

		// Make sure the button press was correct
		Pin_Info_t simon_pin = pattern->pins[s];
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	441a      	add	r2, r3
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000786:	e883 0003 	stmia.w	r3, {r0, r1}
		Pin_Info_t player_pin = led_group->pins[active_index];
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	441a      	add	r2, r3
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079c:	e883 0003 	stmia.w	r3, {r0, r1}

		printf("[Simon pin #: %d Player pin #: %d] [Simon port addr: %p Player port addr: %p\r\n]",
				simon_pin.pin, player_pin.pin, simon_pin.port, player_pin.port);
 80007a0:	7f3b      	ldrb	r3, [r7, #28]
		printf("[Simon pin #: %d Player pin #: %d] [Simon port addr: %p Player port addr: %p\r\n]",
 80007a2:	4619      	mov	r1, r3
				simon_pin.pin, player_pin.pin, simon_pin.port, player_pin.port);
 80007a4:	7d3b      	ldrb	r3, [r7, #20]
		printf("[Simon pin #: %d Player pin #: %d] [Simon port addr: %p Player port addr: %p\r\n]",
 80007a6:	4618      	mov	r0, r3
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	4613      	mov	r3, r2
 80007b0:	4602      	mov	r2, r0
 80007b2:	480e      	ldr	r0, [pc, #56]	@ (80007ec <game_get_player_input+0x12c>)
 80007b4:	f000 fd82 	bl	80012bc <iprintf>

		if (simon_pin.port != player_pin.port || simon_pin.pin != player_pin.pin) {
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d103      	bne.n	80007c8 <game_get_player_input+0x108>
 80007c0:	7f3a      	ldrb	r2, [r7, #28]
 80007c2:	7d3b      	ldrb	r3, [r7, #20]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d002      	beq.n	80007ce <game_get_player_input+0x10e>
			status = PLAYER_FAILURE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007cc:	e008      	b.n	80007e0 <game_get_player_input+0x120>
			break;
		}

		s++;
 80007ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d0:	3301      	adds	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (s < pattern->count) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007da:	429a      	cmp	r2, r3
 80007dc:	f63f af7b 	bhi.w	80006d6 <game_get_player_input+0x16>
	}

	return status;
 80007e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3730      	adds	r7, #48	@ 0x30
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08002234 	.word	0x08002234

080007f0 <game_handle_status>:

static void game_handle_status(const int status, const Pin_Collection_t *status_led_group) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	if (status == PLAYER_SUCCESS) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d112      	bne.n	8000826 <game_handle_status+0x36>
		// Success blink
		for (int j = 0; j < STATUS_LED_BLINK_COUNT; j++) {
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e00b      	b.n	800081e <game_handle_status+0x2e>
			led_blink(status_led_group->pins[1], STATUS_LED_COEF, STATUS_LED_COEF);	// pin 1 is the green led
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f103 0108 	add.w	r1, r3, #8
 800080e:	23c8      	movs	r3, #200	@ 0xc8
 8000810:	22c8      	movs	r2, #200	@ 0xc8
 8000812:	c903      	ldmia	r1, {r0, r1}
 8000814:	f000 f897 	bl	8000946 <led_blink>
		for (int j = 0; j < STATUS_LED_BLINK_COUNT; j++) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b04      	cmp	r3, #4
 8000822:	ddf0      	ble.n	8000806 <game_handle_status+0x16>
 8000824:	e00f      	b.n	8000846 <game_handle_status+0x56>
		}
	}
	else {
		// Failure blink
		for (int j = 0; j < STATUS_LED_BLINK_COUNT; j++) {
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	e009      	b.n	8000840 <game_handle_status+0x50>
			led_blink(status_led_group->pins[0], STATUS_LED_COEF, STATUS_LED_COEF);	// pin 0 is the red led
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	23c8      	movs	r3, #200	@ 0xc8
 8000832:	22c8      	movs	r2, #200	@ 0xc8
 8000834:	c903      	ldmia	r1, {r0, r1}
 8000836:	f000 f886 	bl	8000946 <led_blink>
		for (int j = 0; j < STATUS_LED_BLINK_COUNT; j++) {
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b04      	cmp	r3, #4
 8000844:	ddf2      	ble.n	800082c <game_handle_status+0x3c>
		}
	}

	if (status != PLAYER_SUCCESS || game_size == MAX_PATTERN_SIZE) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d103      	bne.n	8000854 <game_handle_status+0x64>
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <game_handle_status+0x70>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b0a      	cmp	r3, #10
 8000852:	d101      	bne.n	8000858 <game_handle_status+0x68>
		NVIC_SystemReset();
 8000854:	f7ff fd0c 	bl	8000270 <__NVIC_SystemReset>
	}
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000000 	.word	0x20000000

08000864 <led_pin_init>:

/**
 * @brief  Initializes a led for the Simon Says game to an output push-pull low speed pin
 * @retval none
 */
static void led_pin_init(const Pin_Info_t led_info) {
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	@ 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	463b      	mov	r3, r7
 800086c:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mode_pos = led_info.pin * 2; 		// mode is 2 bits long
 8000870:	793b      	ldrb	r3, [r7, #4]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
	uint32_t mode_msk = (0x3UL << mode_pos);
 8000876:	2203      	movs	r2, #3
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	61bb      	str	r3, [r7, #24]

	uint32_t otype_pos = led_info.pin;			// type is 1 bit long
 8000880:	793b      	ldrb	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	uint32_t otype_msk = (0x1UL << otype_pos);
 8000884:	2201      	movs	r2, #1
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	613b      	str	r3, [r7, #16]

	uint32_t ospeed_pos = led_info.pin * 2;	// speed is 2 bits long
 800088e:	793b      	ldrb	r3, [r7, #4]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
	uint32_t ospeed_msk = (0x3UL << ospeed_pos);
 8000894:	2203      	movs	r2, #3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	60bb      	str	r3, [r7, #8]

	// Set mode to output
	led_info.port->MODER &= ~mode_msk;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	6819      	ldr	r1, [r3, #0]
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	43da      	mvns	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	400a      	ands	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
	led_info.port->MODER |= (GPIO_MODE_O << mode_pos);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	6819      	ldr	r1, [r3, #0]
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	409a      	lsls	r2, r3
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]

	// Set output type to push-pull
	led_info.port->OTYPER &= ~otype_msk;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	6859      	ldr	r1, [r3, #4]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	43da      	mvns	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	400a      	ands	r2, r1
 80008c8:	605a      	str	r2, [r3, #4]
	led_info.port->OTYPER |= (GPIO_OTYPE_PUSH_PULL << otype_pos);
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	6852      	ldr	r2, [r2, #4]
 80008d0:	605a      	str	r2, [r3, #4]

	// Set speed to low
	led_info.port->OSPEEDR &= ~ospeed_msk;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	6899      	ldr	r1, [r3, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	43da      	mvns	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	400a      	ands	r2, r1
 80008de:	609a      	str	r2, [r3, #8]
	led_info.port->OSPEEDR |= (GPIO_OSPEED_LOW << ospeed_pos);
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	6892      	ldr	r2, [r2, #8]
 80008e6:	609a      	str	r2, [r3, #8]
}
 80008e8:	bf00      	nop
 80008ea:	3724      	adds	r7, #36	@ 0x24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <led_enable>:

/** @breif  Enables an led output pin
 *  @retval none
 */
static void led_enable(const Pin_Info_t led_info) {
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	463b      	mov	r3, r7
 80008fc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t pin_pos = led_info.pin;
 8000900:	793b      	ldrb	r3, [r7, #4]
 8000902:	73fb      	strb	r3, [r7, #15]
	led_info.port->BSRR = (0x1UL << pin_pos);
 8000904:	7bfa      	ldrb	r2, [r7, #15]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	619a      	str	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <led_disable>:

/** @breif  Disables an led output pin
 *  @retval none
 */
static void led_disable(const Pin_Info_t led_info) {
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	463b      	mov	r3, r7
 8000924:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t pin_pos = led_info.pin + 16;   // plus 16 to skip bit set registers
 8000928:	793b      	ldrb	r3, [r7, #4]
 800092a:	3310      	adds	r3, #16
 800092c:	73fb      	strb	r3, [r7, #15]
	led_info.port->BSRR = (0x1UL << pin_pos);
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2101      	movs	r1, #1
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	619a      	str	r2, [r3, #24]
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <led_blink>:

static void led_blink(Pin_Info_t led, int duration, int wait) {
 8000946:	b590      	push	{r4, r7, lr}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	f107 0408 	add.w	r4, r7, #8
 8000950:	e884 0003 	stmia.w	r4, {r0, r1}
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	603b      	str	r3, [r7, #0]
	led_enable(led);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000960:	f7ff ffc8 	bl	80008f4 <led_enable>
	systick_delay_ms(duration);	// Hold light on for (duration) milliseconds
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f9c4 	bl	8000cf4 <systick_delay_ms>
	led_disable(led);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000974:	f7ff ffd2 	bl	800091c <led_disable>
	systick_delay_ms(wait);		// Sit (wait) milliseconds before continuing
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f9ba 	bl	8000cf4 <systick_delay_ms>
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}

08000988 <button_pin_init>:

/**
 * @brief  Initializes a button for the Simon Says game to an input pull-down pin
 * @retval none
 */
static void button_pin_init(const Pin_Info_t button_info) {
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	463b      	mov	r3, r7
 8000990:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t mode_pos = button_info.pin * 2; 			// each mode is 2 bits long
 8000994:	793b      	ldrb	r3, [r7, #4]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	617b      	str	r3, [r7, #20]
	uint32_t mode_msk = (0x3UL << mode_pos);
 800099a:	2203      	movs	r2, #3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	613b      	str	r3, [r7, #16]

	uint32_t pull_resistor_pos = button_info.pin * 2;	// each speed is 2 bits long
 80009a4:	793b      	ldrb	r3, [r7, #4]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
	uint32_t pull_resistor_msk = (0x3UL << pull_resistor_pos);
 80009aa:	2203      	movs	r2, #3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	60bb      	str	r3, [r7, #8]

	// Set mode to input
	button_info.port->MODER &= ~mode_msk;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	6819      	ldr	r1, [r3, #0]
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	43da      	mvns	r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	400a      	ands	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
	button_info.port->MODER |= (GPIO_MODE_I << mode_pos);
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	601a      	str	r2, [r3, #0]

	// Set resistor type to pull down
	button_info.port->PUPDR &= ~pull_resistor_msk;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68d9      	ldr	r1, [r3, #12]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	43da      	mvns	r2, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	400a      	ands	r2, r1
 80009d6:	60da      	str	r2, [r3, #12]
	button_info.port->PUPDR |= (GPIO_PUPDR_PULL_DOWN << pull_resistor_pos);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68d9      	ldr	r1, [r3, #12]
 80009dc:	2202      	movs	r2, #2
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	409a      	lsls	r2, r3
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	430a      	orrs	r2, r1
 80009e6:	60da      	str	r2, [r3, #12]
}
 80009e8:	bf00      	nop
 80009ea:	371c      	adds	r7, #28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <button_is_active>:

/**
 *  @brief  Checks if a button is currently being pressed
 *  @retval 1 if pressed | 0 if not pressed
 */
static int button_is_active(const Pin_Info_t button_info) {
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	463b      	mov	r3, r7
 80009fc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t position = button_info.pin;
 8000a00:	793b      	ldrb	r3, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
	return (button_info.port->IDR & (0x1UL << position));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	691a      	ldr	r2, [r3, #16]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4013      	ands	r3, r2
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <mcu_clock_config>:

/**
 * @brief  Configures the system clock. Uses the HSI16 to configure and enable PLL to 80MHz
 * @retval none
 */
static void mcu_clock_config(void) {
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

	// Enable HSI for enabling the PLL
	RCC->CR |= RCC_CR_HSION;	// enable clock
 8000a24:	4b3e      	ldr	r3, [pc, #248]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a3d      	ldr	r2, [pc, #244]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2e:	6013      	str	r3, [r2, #0]

	while (!(RCC->CR & RCC_CR_HSIRDY)) {
 8000a30:	bf00      	nop
 8000a32:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f9      	beq.n	8000a32 <mcu_clock_config+0x12>
		// wait until clock is ready
	}

	// Set power voltage scaling to range 1 (high-performance mode)
	PWR->CR1 &= ~PWR_CR1_VOS_Msk;
 8000a3e:	4b39      	ldr	r3, [pc, #228]	@ (8000b24 <mcu_clock_config+0x104>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a38      	ldr	r2, [pc, #224]	@ (8000b24 <mcu_clock_config+0x104>)
 8000a44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000a48:	6013      	str	r3, [r2, #0]
	PWR->CR1 |= PWR_CR1_VOS_0;
 8000a4a:	4b36      	ldr	r3, [pc, #216]	@ (8000b24 <mcu_clock_config+0x104>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a35      	ldr	r2, [pc, #212]	@ (8000b24 <mcu_clock_config+0x104>)
 8000a50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a54:	6013      	str	r3, [r2, #0]

	while (PWR->SR2 & PWR_SR2_VOSF) {
 8000a56:	bf00      	nop
 8000a58:	4b32      	ldr	r3, [pc, #200]	@ (8000b24 <mcu_clock_config+0x104>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f9      	bne.n	8000a58 <mcu_clock_config+0x38>
		// wait until target voltage is reached (cleared bits when ready)
	}

	// Increase latency to prevent cpu clock from outpacing flash memory access time
	FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk;		// clear bits
 8000a64:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <mcu_clock_config+0x108>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <mcu_clock_config+0x108>)
 8000a6a:	f023 0307 	bic.w	r3, r3, #7
 8000a6e:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_4WS;	// set latency to 4 wait states (5 CPU cycles)
 8000a70:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <mcu_clock_config+0x108>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a2c      	ldr	r2, [pc, #176]	@ (8000b28 <mcu_clock_config+0x108>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6013      	str	r3, [r2, #0]

	// Turn PLL off before configurement
	RCC->CR &= ~RCC_CR_PLLON_Msk;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a27      	ldr	r2, [pc, #156]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000a86:	6013      	str	r3, [r2, #0]

	while (RCC->CR & RCC_CR_PLLRDY) {
 8000a88:	bf00      	nop
 8000a8a:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f9      	bne.n	8000a8a <mcu_clock_config+0x6a>
	}

	// Configure the PLL (goal: HSI16 /M*N /R = 16MHz /1 *10 /2 = 80MHz)
	// PLLM = 1 (000b), PLLN = 10 (0001010b), PLLR = 2 (00b)
	// HSI16 is selected with value 0x2 for PLLSRC.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC_Msk | RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk
 8000a96:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	4921      	ldr	r1, [pc, #132]	@ (8000b20 <mcu_clock_config+0x100>)
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <mcu_clock_config+0x10c>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60cb      	str	r3, [r1, #12]
			| RCC_PLLCFGR_PLLR_Msk);

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;	// set source as HSI16
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <mcu_clock_config+0x100>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b20 <mcu_clock_config+0x100>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR |= (0x0UL << RCC_PLLCFGR_PLLM_Pos) | 	 // PLLM = 1
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <mcu_clock_config+0x100>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b20 <mcu_clock_config+0x100>)
 8000ab4:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8000ab8:	60d3      	str	r3, [r2, #12]
			(0xAUL << RCC_PLLCFGR_PLLN_Pos) |	 // PLLN = 10
			(0x0UL << RCC_PLLCFGR_PLLR_Pos); 	 // PLLR = 2

	// Enable the PLL PLLCLK output (for SYSCLK)
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <mcu_clock_config+0x100>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	4a18      	ldr	r2, [pc, #96]	@ (8000b20 <mcu_clock_config+0x100>)
 8000ac0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ac4:	60d3      	str	r3, [r2, #12]

	// Enable the PLL
	RCC->CR |= RCC_CR_PLLON;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <mcu_clock_config+0x100>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <mcu_clock_config+0x100>)
 8000acc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ad0:	6013      	str	r3, [r2, #0]

	while (!(RCC->CR & RCC_CR_PLLRDY)) {
 8000ad2:	bf00      	nop
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <mcu_clock_config+0x100>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f9      	beq.n	8000ad4 <mcu_clock_config+0xb4>
		// wait until PLL is ready
	}

	// Set system clock to PLL
	RCC->CFGR &= ~RCC_CFGR_SW_Msk;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <mcu_clock_config+0x100>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <mcu_clock_config+0x100>)
 8000ae6:	f023 0303 	bic.w	r3, r3, #3
 8000aea:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <mcu_clock_config+0x100>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b20 <mcu_clock_config+0x100>)
 8000af2:	f043 0303 	orr.w	r3, r3, #3
 8000af6:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL) {
 8000af8:	bf00      	nop
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <mcu_clock_config+0x100>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	f003 030c 	and.w	r3, r3, #12
 8000b02:	2b0c      	cmp	r3, #12
 8000b04:	d1f9      	bne.n	8000afa <mcu_clock_config+0xda>
		// wait until PLL is used as system clock source
	}

	// Configure AHB and APB prescalers
	RCC->CFGR &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk); // no division
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <mcu_clock_config+0x100>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <mcu_clock_config+0x100>)
 8000b0c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000b10:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b14:	6093      	str	r3, [r2, #8]
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40007000 	.word	0x40007000
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	f9ff808c 	.word	0xf9ff808c

08000b30 <gpio_init>:
/**
 * @brief  Configures and enables ports and pins to be used during the program.
 * @retval none
 */
static void gpio_init(const Port_Collection_t *port_group, const Pin_Collection_t *led_group,
		const Pin_Collection_t *button_group, const Pin_Collection_t *status_led_group) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	603b      	str	r3, [r7, #0]
	// Enable GPIO ports
	for (int i = 0; i < port_group->count; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	e00b      	b.n	8000b5c <gpio_init+0x2c>
		gpio_enable_port_clock(port_group->ports[i]);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f849 	bl	8000be8 <gpio_enable_port_clock>
	for (int i = 0; i < port_group->count; i++) {
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d8ee      	bhi.n	8000b44 <gpio_init+0x14>
	}

	// Enable LED Pins
	for (int i = 0; i < led_group->count; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	e00b      	b.n	8000b84 <gpio_init+0x54>
		led_pin_init(led_group->pins[i]);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4413      	add	r3, r2
 8000b76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b7a:	f7ff fe73 	bl	8000864 <led_pin_init>
	for (int i = 0; i < led_group->count; i++) {
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	3301      	adds	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d8ee      	bhi.n	8000b6c <gpio_init+0x3c>
	}

	// Enable Button Pins
	for (int i = 0; i < button_group->count; i++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e00b      	b.n	8000bac <gpio_init+0x7c>
		button_pin_init(button_group->pins[i]);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ba2:	f7ff fef1 	bl	8000988 <button_pin_init>
	for (int i = 0; i < button_group->count; i++) {
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d8ee      	bhi.n	8000b94 <gpio_init+0x64>
	}

	// Enable status LED Pins
	for (int i = 0; i < status_led_group->count; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	e00b      	b.n	8000bd4 <gpio_init+0xa4>
		led_pin_init(status_led_group->pins[i]);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bca:	f7ff fe4b 	bl	8000864 <led_pin_init>
	for (int i = 0; i < status_led_group->count; i++) {
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d8ee      	bhi.n	8000bbc <gpio_init+0x8c>
	}
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <gpio_enable_port_clock>:

/**
 * @brief  Enables a port on the microcontroller based on the memory address of the port struct passed
 * @retval none
 */
static void gpio_enable_port_clock(const GPIO_TypeDef *port) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bf6:	d106      	bne.n	8000c06 <gpio_enable_port_clock+0x1e>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
	}
	else if (port == GPIOH) {
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
	}
	// Ignores invalid port value
}
 8000c04:	e04b      	b.n	8000c9e <gpio_enable_port_clock+0xb6>
	else if (port == GPIOB) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a29      	ldr	r2, [pc, #164]	@ (8000cb0 <gpio_enable_port_clock+0xc8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <gpio_enable_port_clock+0x34>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c0e:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a26      	ldr	r2, [pc, #152]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c1a:	e040      	b.n	8000c9e <gpio_enable_port_clock+0xb6>
	else if (port == GPIOC) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a25      	ldr	r2, [pc, #148]	@ (8000cb4 <gpio_enable_port_clock+0xcc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <gpio_enable_port_clock+0x4a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c28:	4a20      	ldr	r2, [pc, #128]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c30:	e035      	b.n	8000c9e <gpio_enable_port_clock+0xb6>
	else if (port == GPIOD) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a20      	ldr	r2, [pc, #128]	@ (8000cb8 <gpio_enable_port_clock+0xd0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d106      	bne.n	8000c48 <gpio_enable_port_clock+0x60>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c46:	e02a      	b.n	8000c9e <gpio_enable_port_clock+0xb6>
	else if (port == GPIOE) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <gpio_enable_port_clock+0xd4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <gpio_enable_port_clock+0x76>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c54:	4a15      	ldr	r2, [pc, #84]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c5c:	e01f      	b.n	8000c9e <gpio_enable_port_clock+0xb6>
	else if (port == GPIOF) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a17      	ldr	r2, [pc, #92]	@ (8000cc0 <gpio_enable_port_clock+0xd8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d106      	bne.n	8000c74 <gpio_enable_port_clock+0x8c>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c6c:	f043 0320 	orr.w	r3, r3, #32
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c72:	e014      	b.n	8000c9e <gpio_enable_port_clock+0xb6>
	else if (port == GPIOG) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <gpio_enable_port_clock+0xdc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d106      	bne.n	8000c8a <gpio_enable_port_clock+0xa2>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c88:	e009      	b.n	8000c9e <gpio_enable_port_clock+0xb6>
	else if (port == GPIOH) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc8 <gpio_enable_port_clock+0xe0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d105      	bne.n	8000c9e <gpio_enable_port_clock+0xb6>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <gpio_enable_port_clock+0xc4>)
 8000c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	48000c00 	.word	0x48000c00
 8000cbc:	48001000 	.word	0x48001000
 8000cc0:	48001400 	.word	0x48001400
 8000cc4:	48001800 	.word	0x48001800
 8000cc8:	48001c00 	.word	0x48001c00

08000ccc <systick_init>:
 ======================================================================================================*/

/**
 * @brief Initializes the SysTick timer to generate an interrupt every 1ms.
 */
static void systick_init(void) {
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	// (80,000,000 cycles/sec) / (1000 ticks/sec) = 80,000 cycles/tick
	// The -1 is because the timer counts down to 0, which is one cycle.
	SysTick->LOAD = 80000 - 1;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <systick_init+0x20>)
 8000cd2:	4a07      	ldr	r2, [pc, #28]	@ (8000cf0 <systick_init+0x24>)
 8000cd4:	605a      	str	r2, [r3, #4]

	// Reset the current value
	SysTick->VAL = 0;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <systick_init+0x20>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]

	// Enable the SysTick timer and its interrupt, using the main processor clock
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <systick_init+0x20>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	601a      	str	r2, [r3, #0]
	SysTick_CTRL_TICKINT_Msk |
	SysTick_CTRL_ENABLE_Msk;
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e010 	.word	0xe000e010
 8000cf0:	0001387f 	.word	0x0001387f

08000cf4 <systick_delay_ms>:

/**
 * @brief Waits a desired amount of miliseconds by listening to the systick
 * @param ms The number of milliseconds to wait
 */
static void systick_delay_ms(uint32_t ms) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	g_timing_delay = ms;
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <systick_delay_ms+0x28>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
	while (g_timing_delay > 0) {
 8000d02:	bf00      	nop
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <systick_delay_ms+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1fb      	bne.n	8000d04 <systick_delay_ms+0x10>
		// Wait for g_timing_delay to hit 0
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	2000007c 	.word	0x2000007c

08000d20 <SysTick_Handler>:

/**
 * @brief This function runs/finishes every 1ms after systick initalization
 */
void SysTick_Handler(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	if (g_timing_delay > 0) {
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <SysTick_Handler+0x20>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d004      	beq.n	8000d36 <SysTick_Handler+0x16>
		g_timing_delay--;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Handler+0x20>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	4a03      	ldr	r2, [pc, #12]	@ (8000d40 <SysTick_Handler+0x20>)
 8000d34:	6013      	str	r3, [r2, #0]
	}
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	2000007c 	.word	0x2000007c

08000d44 <get_random_seed_from_adc>:
/**
 * @brief  Gets a pseudo-random seed by reading the noise from unconnected pin PB1.
 * @note   This function temporarily enables ADC1 on pin PB1.
 * @retval A 32-bit integer based on the ADC reading.
 */
static uint32_t get_random_seed_from_adc(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
    uint32_t seed = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]

    // Enable clocks for ADC and GPIOB (CHANGED from GPIOB)
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN | RCC_AHB2ENR_GPIOBEN;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	4a38      	ldr	r2, [pc, #224]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000d54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c

    RCC->CCIPR &= ~RCC_CCIPR_ADCSEL; // Clear the selection bits first
 8000d5e:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d64:	4a33      	ldr	r2, [pc, #204]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000d66:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR |= RCC_CCIPR_ADCSEL;  // Select SYSCLK as ADC clock (sets bits to 11)
 8000d6e:	4b31      	ldr	r3, [pc, #196]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d74:	4a2f      	ldr	r2, [pc, #188]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000d76:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000d7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    // Configure PB1 as an analog pin
    GPIOB->MODER |= (0x3UL << GPIO_MODER_MODE1_Pos);    // Set PB1 to Analog mode (11)
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <get_random_seed_from_adc+0xf4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a2d      	ldr	r2, [pc, #180]	@ (8000e38 <get_random_seed_from_adc+0xf4>)
 8000d84:	f043 030c 	orr.w	r3, r3, #12
 8000d88:	6013      	str	r3, [r2, #0]
    GPIOB->ASCR |= GPIO_ASCR_ASC1;         				// Connect analog switch to ADC for PB1
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e38 <get_random_seed_from_adc+0xf4>)
 8000d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e38 <get_random_seed_from_adc+0xf4>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Wake up ADC and enable its voltage regulator
    ADC1->CR &= ~ADC_CR_DEEPPWD;
 8000d96:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4a28      	ldr	r2, [pc, #160]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000d9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000da0:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN;
 8000da2:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	4a25      	ldr	r2, [pc, #148]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	6093      	str	r3, [r2, #8]
    systick_delay_ms(1); // Wait for regulator to stabilize
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff ffa0 	bl	8000cf4 <systick_delay_ms>

    // Set ADC conversion sequence. Pin PB1 is on ADC Channel 16.
    ADC1->SQR1 = (16 << ADC_SQR1_SQ1_Pos);
 8000db4:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000db6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dba:	631a      	str	r2, [r3, #48]	@ 0x30

    // Enable the ADC and wait for it to be ready
    ADC1->CR |= ADC_CR_ADEN;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));
 8000dc8:	bf00      	nop
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f9      	beq.n	8000dca <get_random_seed_from_adc+0x86>

    // Start the conversion and wait for it to complete
    ADC1->CR |= ADC_CR_ADSTART;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4a18      	ldr	r2, [pc, #96]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_EOC));
 8000de2:	bf00      	nop
 8000de4:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f9      	beq.n	8000de4 <get_random_seed_from_adc+0xa0>

    // Read the result
    seed = ADC1->DR;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	607b      	str	r3, [r7, #4]

    // Disable ADC to save power
    ADC1->CR |= ADC_CR_ADDIS;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADDIS);
 8000e02:	bf00      	nop
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f9      	bne.n	8000e04 <get_random_seed_from_adc+0xc0>
    ADC1->CR |= ADC_CR_DEEPPWD;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <get_random_seed_from_adc+0xf8>)
 8000e16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e1a:	6093      	str	r3, [r2, #8]
    RCC->AHB2ENR &= ~(RCC_AHB2ENR_ADCEN);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <get_random_seed_from_adc+0xf0>)
 8000e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000e26:	64d3      	str	r3, [r2, #76]	@ 0x4c

    return seed;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000400 	.word	0x48000400
 8000e3c:	50040000 	.word	0x50040000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  return 1;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_kill>:

int _kill(int pid, int sig)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eac:	f000 fb9c 	bl	80015e8 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2216      	movs	r2, #22
 8000eb4:	601a      	str	r2, [r3, #0]
  return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_exit>:

void _exit (int status)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffe7 	bl	8000ea2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <_exit+0x12>

08000ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00a      	b.n	8000f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eea:	f3af 8000 	nop.w
 8000eee:	4601      	mov	r1, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf0      	blt.n	8000eea <_read+0x12>
  }

  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f000 fb1c 	bl	80015e8 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20018000 	.word	0x20018000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	200000d8 	.word	0x200000d8
 8000fe4:	20000228 	.word	0x20000228

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001010:	f7ff ffea 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	@ (800104c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	@ (8001058 <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f000 fadb 	bl	80015f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103e:	f7ff f92d 	bl	800029c <main>

08001042 <LoopForever>:

LoopForever:
    b LoopForever
 8001042:	e7fe      	b.n	8001042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001050:	08002374 	.word	0x08002374
  ldr r2, =_sbss
 8001054:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001058:	20000228 	.word	0x20000228

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <srand>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <srand+0x44>)
 8001064:	681d      	ldr	r5, [r3, #0]
 8001066:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001068:	4604      	mov	r4, r0
 800106a:	b9b3      	cbnz	r3, 800109a <srand+0x3a>
 800106c:	2018      	movs	r0, #24
 800106e:	f000 fb51 	bl	8001714 <malloc>
 8001072:	4602      	mov	r2, r0
 8001074:	6328      	str	r0, [r5, #48]	@ 0x30
 8001076:	b920      	cbnz	r0, 8001082 <srand+0x22>
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <srand+0x48>)
 800107a:	480c      	ldr	r0, [pc, #48]	@ (80010ac <srand+0x4c>)
 800107c:	2146      	movs	r1, #70	@ 0x46
 800107e:	f000 fae1 	bl	8001644 <__assert_func>
 8001082:	490b      	ldr	r1, [pc, #44]	@ (80010b0 <srand+0x50>)
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <srand+0x54>)
 8001086:	e9c0 1300 	strd	r1, r3, [r0]
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <srand+0x58>)
 800108c:	6083      	str	r3, [r0, #8]
 800108e:	230b      	movs	r3, #11
 8001090:	8183      	strh	r3, [r0, #12]
 8001092:	2100      	movs	r1, #0
 8001094:	2001      	movs	r0, #1
 8001096:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800109a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800109c:	2200      	movs	r2, #0
 800109e:	611c      	str	r4, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
 80010a4:	20000010 	.word	0x20000010
 80010a8:	08002284 	.word	0x08002284
 80010ac:	0800229b 	.word	0x0800229b
 80010b0:	abcd330e 	.word	0xabcd330e
 80010b4:	e66d1234 	.word	0xe66d1234
 80010b8:	0005deec 	.word	0x0005deec

080010bc <rand>:
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <rand+0x5c>)
 80010be:	b510      	push	{r4, lr}
 80010c0:	681c      	ldr	r4, [r3, #0]
 80010c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80010c4:	b9b3      	cbnz	r3, 80010f4 <rand+0x38>
 80010c6:	2018      	movs	r0, #24
 80010c8:	f000 fb24 	bl	8001714 <malloc>
 80010cc:	4602      	mov	r2, r0
 80010ce:	6320      	str	r0, [r4, #48]	@ 0x30
 80010d0:	b920      	cbnz	r0, 80010dc <rand+0x20>
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <rand+0x60>)
 80010d4:	4812      	ldr	r0, [pc, #72]	@ (8001120 <rand+0x64>)
 80010d6:	2152      	movs	r1, #82	@ 0x52
 80010d8:	f000 fab4 	bl	8001644 <__assert_func>
 80010dc:	4911      	ldr	r1, [pc, #68]	@ (8001124 <rand+0x68>)
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <rand+0x6c>)
 80010e0:	e9c0 1300 	strd	r1, r3, [r0]
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <rand+0x70>)
 80010e6:	6083      	str	r3, [r0, #8]
 80010e8:	230b      	movs	r3, #11
 80010ea:	8183      	strh	r3, [r0, #12]
 80010ec:	2100      	movs	r1, #0
 80010ee:	2001      	movs	r0, #1
 80010f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80010f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80010f6:	480e      	ldr	r0, [pc, #56]	@ (8001130 <rand+0x74>)
 80010f8:	690b      	ldr	r3, [r1, #16]
 80010fa:	694c      	ldr	r4, [r1, #20]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <rand+0x78>)
 80010fe:	4358      	muls	r0, r3
 8001100:	fb02 0004 	mla	r0, r2, r4, r0
 8001104:	fba3 3202 	umull	r3, r2, r3, r2
 8001108:	3301      	adds	r3, #1
 800110a:	eb40 0002 	adc.w	r0, r0, r2
 800110e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001112:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001116:	bd10      	pop	{r4, pc}
 8001118:	20000010 	.word	0x20000010
 800111c:	08002284 	.word	0x08002284
 8001120:	0800229b 	.word	0x0800229b
 8001124:	abcd330e 	.word	0xabcd330e
 8001128:	e66d1234 	.word	0xe66d1234
 800112c:	0005deec 	.word	0x0005deec
 8001130:	5851f42d 	.word	0x5851f42d
 8001134:	4c957f2d 	.word	0x4c957f2d

08001138 <std>:
 8001138:	2300      	movs	r3, #0
 800113a:	b510      	push	{r4, lr}
 800113c:	4604      	mov	r4, r0
 800113e:	e9c0 3300 	strd	r3, r3, [r0]
 8001142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001146:	6083      	str	r3, [r0, #8]
 8001148:	8181      	strh	r1, [r0, #12]
 800114a:	6643      	str	r3, [r0, #100]	@ 0x64
 800114c:	81c2      	strh	r2, [r0, #14]
 800114e:	6183      	str	r3, [r0, #24]
 8001150:	4619      	mov	r1, r3
 8001152:	2208      	movs	r2, #8
 8001154:	305c      	adds	r0, #92	@ 0x5c
 8001156:	f000 f9f9 	bl	800154c <memset>
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <std+0x58>)
 800115c:	6263      	str	r3, [r4, #36]	@ 0x24
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <std+0x5c>)
 8001160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <std+0x60>)
 8001164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <std+0x64>)
 8001168:	6323      	str	r3, [r4, #48]	@ 0x30
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <std+0x68>)
 800116c:	6224      	str	r4, [r4, #32]
 800116e:	429c      	cmp	r4, r3
 8001170:	d006      	beq.n	8001180 <std+0x48>
 8001172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001176:	4294      	cmp	r4, r2
 8001178:	d002      	beq.n	8001180 <std+0x48>
 800117a:	33d0      	adds	r3, #208	@ 0xd0
 800117c:	429c      	cmp	r4, r3
 800117e:	d105      	bne.n	800118c <std+0x54>
 8001180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001188:	f000 ba58 	b.w	800163c <__retarget_lock_init_recursive>
 800118c:	bd10      	pop	{r4, pc}
 800118e:	bf00      	nop
 8001190:	0800139d 	.word	0x0800139d
 8001194:	080013bf 	.word	0x080013bf
 8001198:	080013f7 	.word	0x080013f7
 800119c:	0800141b 	.word	0x0800141b
 80011a0:	200000dc 	.word	0x200000dc

080011a4 <stdio_exit_handler>:
 80011a4:	4a02      	ldr	r2, [pc, #8]	@ (80011b0 <stdio_exit_handler+0xc>)
 80011a6:	4903      	ldr	r1, [pc, #12]	@ (80011b4 <stdio_exit_handler+0x10>)
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <stdio_exit_handler+0x14>)
 80011aa:	f000 b869 	b.w	8001280 <_fwalk_sglue>
 80011ae:	bf00      	nop
 80011b0:	20000004 	.word	0x20000004
 80011b4:	08001f25 	.word	0x08001f25
 80011b8:	20000014 	.word	0x20000014

080011bc <cleanup_stdio>:
 80011bc:	6841      	ldr	r1, [r0, #4]
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <cleanup_stdio+0x34>)
 80011c0:	4299      	cmp	r1, r3
 80011c2:	b510      	push	{r4, lr}
 80011c4:	4604      	mov	r4, r0
 80011c6:	d001      	beq.n	80011cc <cleanup_stdio+0x10>
 80011c8:	f000 feac 	bl	8001f24 <_fflush_r>
 80011cc:	68a1      	ldr	r1, [r4, #8]
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <cleanup_stdio+0x38>)
 80011d0:	4299      	cmp	r1, r3
 80011d2:	d002      	beq.n	80011da <cleanup_stdio+0x1e>
 80011d4:	4620      	mov	r0, r4
 80011d6:	f000 fea5 	bl	8001f24 <_fflush_r>
 80011da:	68e1      	ldr	r1, [r4, #12]
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <cleanup_stdio+0x3c>)
 80011de:	4299      	cmp	r1, r3
 80011e0:	d004      	beq.n	80011ec <cleanup_stdio+0x30>
 80011e2:	4620      	mov	r0, r4
 80011e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e8:	f000 be9c 	b.w	8001f24 <_fflush_r>
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	bf00      	nop
 80011f0:	200000dc 	.word	0x200000dc
 80011f4:	20000144 	.word	0x20000144
 80011f8:	200001ac 	.word	0x200001ac

080011fc <global_stdio_init.part.0>:
 80011fc:	b510      	push	{r4, lr}
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <global_stdio_init.part.0+0x30>)
 8001200:	4c0b      	ldr	r4, [pc, #44]	@ (8001230 <global_stdio_init.part.0+0x34>)
 8001202:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <global_stdio_init.part.0+0x38>)
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	4620      	mov	r0, r4
 8001208:	2200      	movs	r2, #0
 800120a:	2104      	movs	r1, #4
 800120c:	f7ff ff94 	bl	8001138 <std>
 8001210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001214:	2201      	movs	r2, #1
 8001216:	2109      	movs	r1, #9
 8001218:	f7ff ff8e 	bl	8001138 <std>
 800121c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001220:	2202      	movs	r2, #2
 8001222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001226:	2112      	movs	r1, #18
 8001228:	f7ff bf86 	b.w	8001138 <std>
 800122c:	20000214 	.word	0x20000214
 8001230:	200000dc 	.word	0x200000dc
 8001234:	080011a5 	.word	0x080011a5

08001238 <__sfp_lock_acquire>:
 8001238:	4801      	ldr	r0, [pc, #4]	@ (8001240 <__sfp_lock_acquire+0x8>)
 800123a:	f000 ba00 	b.w	800163e <__retarget_lock_acquire_recursive>
 800123e:	bf00      	nop
 8001240:	2000021d 	.word	0x2000021d

08001244 <__sfp_lock_release>:
 8001244:	4801      	ldr	r0, [pc, #4]	@ (800124c <__sfp_lock_release+0x8>)
 8001246:	f000 b9fb 	b.w	8001640 <__retarget_lock_release_recursive>
 800124a:	bf00      	nop
 800124c:	2000021d 	.word	0x2000021d

08001250 <__sinit>:
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
 8001254:	f7ff fff0 	bl	8001238 <__sfp_lock_acquire>
 8001258:	6a23      	ldr	r3, [r4, #32]
 800125a:	b11b      	cbz	r3, 8001264 <__sinit+0x14>
 800125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001260:	f7ff bff0 	b.w	8001244 <__sfp_lock_release>
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__sinit+0x28>)
 8001266:	6223      	str	r3, [r4, #32]
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__sinit+0x2c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f5      	bne.n	800125c <__sinit+0xc>
 8001270:	f7ff ffc4 	bl	80011fc <global_stdio_init.part.0>
 8001274:	e7f2      	b.n	800125c <__sinit+0xc>
 8001276:	bf00      	nop
 8001278:	080011bd 	.word	0x080011bd
 800127c:	20000214 	.word	0x20000214

08001280 <_fwalk_sglue>:
 8001280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001284:	4607      	mov	r7, r0
 8001286:	4688      	mov	r8, r1
 8001288:	4614      	mov	r4, r2
 800128a:	2600      	movs	r6, #0
 800128c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001290:	f1b9 0901 	subs.w	r9, r9, #1
 8001294:	d505      	bpl.n	80012a2 <_fwalk_sglue+0x22>
 8001296:	6824      	ldr	r4, [r4, #0]
 8001298:	2c00      	cmp	r4, #0
 800129a:	d1f7      	bne.n	800128c <_fwalk_sglue+0xc>
 800129c:	4630      	mov	r0, r6
 800129e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012a2:	89ab      	ldrh	r3, [r5, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d907      	bls.n	80012b8 <_fwalk_sglue+0x38>
 80012a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012ac:	3301      	adds	r3, #1
 80012ae:	d003      	beq.n	80012b8 <_fwalk_sglue+0x38>
 80012b0:	4629      	mov	r1, r5
 80012b2:	4638      	mov	r0, r7
 80012b4:	47c0      	blx	r8
 80012b6:	4306      	orrs	r6, r0
 80012b8:	3568      	adds	r5, #104	@ 0x68
 80012ba:	e7e9      	b.n	8001290 <_fwalk_sglue+0x10>

080012bc <iprintf>:
 80012bc:	b40f      	push	{r0, r1, r2, r3}
 80012be:	b507      	push	{r0, r1, r2, lr}
 80012c0:	4906      	ldr	r1, [pc, #24]	@ (80012dc <iprintf+0x20>)
 80012c2:	ab04      	add	r3, sp, #16
 80012c4:	6808      	ldr	r0, [r1, #0]
 80012c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80012ca:	6881      	ldr	r1, [r0, #8]
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f000 fb01 	bl	80018d4 <_vfiprintf_r>
 80012d2:	b003      	add	sp, #12
 80012d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80012d8:	b004      	add	sp, #16
 80012da:	4770      	bx	lr
 80012dc:	20000010 	.word	0x20000010

080012e0 <_puts_r>:
 80012e0:	6a03      	ldr	r3, [r0, #32]
 80012e2:	b570      	push	{r4, r5, r6, lr}
 80012e4:	6884      	ldr	r4, [r0, #8]
 80012e6:	4605      	mov	r5, r0
 80012e8:	460e      	mov	r6, r1
 80012ea:	b90b      	cbnz	r3, 80012f0 <_puts_r+0x10>
 80012ec:	f7ff ffb0 	bl	8001250 <__sinit>
 80012f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012f2:	07db      	lsls	r3, r3, #31
 80012f4:	d405      	bmi.n	8001302 <_puts_r+0x22>
 80012f6:	89a3      	ldrh	r3, [r4, #12]
 80012f8:	0598      	lsls	r0, r3, #22
 80012fa:	d402      	bmi.n	8001302 <_puts_r+0x22>
 80012fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012fe:	f000 f99e 	bl	800163e <__retarget_lock_acquire_recursive>
 8001302:	89a3      	ldrh	r3, [r4, #12]
 8001304:	0719      	lsls	r1, r3, #28
 8001306:	d502      	bpl.n	800130e <_puts_r+0x2e>
 8001308:	6923      	ldr	r3, [r4, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d135      	bne.n	800137a <_puts_r+0x9a>
 800130e:	4621      	mov	r1, r4
 8001310:	4628      	mov	r0, r5
 8001312:	f000 f8c5 	bl	80014a0 <__swsetup_r>
 8001316:	b380      	cbz	r0, 800137a <_puts_r+0x9a>
 8001318:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800131c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800131e:	07da      	lsls	r2, r3, #31
 8001320:	d405      	bmi.n	800132e <_puts_r+0x4e>
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	059b      	lsls	r3, r3, #22
 8001326:	d402      	bmi.n	800132e <_puts_r+0x4e>
 8001328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800132a:	f000 f989 	bl	8001640 <__retarget_lock_release_recursive>
 800132e:	4628      	mov	r0, r5
 8001330:	bd70      	pop	{r4, r5, r6, pc}
 8001332:	2b00      	cmp	r3, #0
 8001334:	da04      	bge.n	8001340 <_puts_r+0x60>
 8001336:	69a2      	ldr	r2, [r4, #24]
 8001338:	429a      	cmp	r2, r3
 800133a:	dc17      	bgt.n	800136c <_puts_r+0x8c>
 800133c:	290a      	cmp	r1, #10
 800133e:	d015      	beq.n	800136c <_puts_r+0x8c>
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	6022      	str	r2, [r4, #0]
 8001346:	7019      	strb	r1, [r3, #0]
 8001348:	68a3      	ldr	r3, [r4, #8]
 800134a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800134e:	3b01      	subs	r3, #1
 8001350:	60a3      	str	r3, [r4, #8]
 8001352:	2900      	cmp	r1, #0
 8001354:	d1ed      	bne.n	8001332 <_puts_r+0x52>
 8001356:	2b00      	cmp	r3, #0
 8001358:	da11      	bge.n	800137e <_puts_r+0x9e>
 800135a:	4622      	mov	r2, r4
 800135c:	210a      	movs	r1, #10
 800135e:	4628      	mov	r0, r5
 8001360:	f000 f85f 	bl	8001422 <__swbuf_r>
 8001364:	3001      	adds	r0, #1
 8001366:	d0d7      	beq.n	8001318 <_puts_r+0x38>
 8001368:	250a      	movs	r5, #10
 800136a:	e7d7      	b.n	800131c <_puts_r+0x3c>
 800136c:	4622      	mov	r2, r4
 800136e:	4628      	mov	r0, r5
 8001370:	f000 f857 	bl	8001422 <__swbuf_r>
 8001374:	3001      	adds	r0, #1
 8001376:	d1e7      	bne.n	8001348 <_puts_r+0x68>
 8001378:	e7ce      	b.n	8001318 <_puts_r+0x38>
 800137a:	3e01      	subs	r6, #1
 800137c:	e7e4      	b.n	8001348 <_puts_r+0x68>
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	6022      	str	r2, [r4, #0]
 8001384:	220a      	movs	r2, #10
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e7ee      	b.n	8001368 <_puts_r+0x88>
	...

0800138c <puts>:
 800138c:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <puts+0xc>)
 800138e:	4601      	mov	r1, r0
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f7ff bfa5 	b.w	80012e0 <_puts_r>
 8001396:	bf00      	nop
 8001398:	20000010 	.word	0x20000010

0800139c <__sread>:
 800139c:	b510      	push	{r4, lr}
 800139e:	460c      	mov	r4, r1
 80013a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a4:	f000 f8fc 	bl	80015a0 <_read_r>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	bfab      	itete	ge
 80013ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80013ae:	89a3      	ldrhlt	r3, [r4, #12]
 80013b0:	181b      	addge	r3, r3, r0
 80013b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80013b6:	bfac      	ite	ge
 80013b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80013ba:	81a3      	strhlt	r3, [r4, #12]
 80013bc:	bd10      	pop	{r4, pc}

080013be <__swrite>:
 80013be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c2:	461f      	mov	r7, r3
 80013c4:	898b      	ldrh	r3, [r1, #12]
 80013c6:	05db      	lsls	r3, r3, #23
 80013c8:	4605      	mov	r5, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	4616      	mov	r6, r2
 80013ce:	d505      	bpl.n	80013dc <__swrite+0x1e>
 80013d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d4:	2302      	movs	r3, #2
 80013d6:	2200      	movs	r2, #0
 80013d8:	f000 f8d0 	bl	800157c <_lseek_r>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013e6:	81a3      	strh	r3, [r4, #12]
 80013e8:	4632      	mov	r2, r6
 80013ea:	463b      	mov	r3, r7
 80013ec:	4628      	mov	r0, r5
 80013ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013f2:	f000 b8e7 	b.w	80015c4 <_write_r>

080013f6 <__sseek>:
 80013f6:	b510      	push	{r4, lr}
 80013f8:	460c      	mov	r4, r1
 80013fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013fe:	f000 f8bd 	bl	800157c <_lseek_r>
 8001402:	1c43      	adds	r3, r0, #1
 8001404:	89a3      	ldrh	r3, [r4, #12]
 8001406:	bf15      	itete	ne
 8001408:	6560      	strne	r0, [r4, #84]	@ 0x54
 800140a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800140e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001412:	81a3      	strheq	r3, [r4, #12]
 8001414:	bf18      	it	ne
 8001416:	81a3      	strhne	r3, [r4, #12]
 8001418:	bd10      	pop	{r4, pc}

0800141a <__sclose>:
 800141a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800141e:	f000 b89d 	b.w	800155c <_close_r>

08001422 <__swbuf_r>:
 8001422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001424:	460e      	mov	r6, r1
 8001426:	4614      	mov	r4, r2
 8001428:	4605      	mov	r5, r0
 800142a:	b118      	cbz	r0, 8001434 <__swbuf_r+0x12>
 800142c:	6a03      	ldr	r3, [r0, #32]
 800142e:	b90b      	cbnz	r3, 8001434 <__swbuf_r+0x12>
 8001430:	f7ff ff0e 	bl	8001250 <__sinit>
 8001434:	69a3      	ldr	r3, [r4, #24]
 8001436:	60a3      	str	r3, [r4, #8]
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	071a      	lsls	r2, r3, #28
 800143c:	d501      	bpl.n	8001442 <__swbuf_r+0x20>
 800143e:	6923      	ldr	r3, [r4, #16]
 8001440:	b943      	cbnz	r3, 8001454 <__swbuf_r+0x32>
 8001442:	4621      	mov	r1, r4
 8001444:	4628      	mov	r0, r5
 8001446:	f000 f82b 	bl	80014a0 <__swsetup_r>
 800144a:	b118      	cbz	r0, 8001454 <__swbuf_r+0x32>
 800144c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001450:	4638      	mov	r0, r7
 8001452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	6922      	ldr	r2, [r4, #16]
 8001458:	1a98      	subs	r0, r3, r2
 800145a:	6963      	ldr	r3, [r4, #20]
 800145c:	b2f6      	uxtb	r6, r6
 800145e:	4283      	cmp	r3, r0
 8001460:	4637      	mov	r7, r6
 8001462:	dc05      	bgt.n	8001470 <__swbuf_r+0x4e>
 8001464:	4621      	mov	r1, r4
 8001466:	4628      	mov	r0, r5
 8001468:	f000 fd5c 	bl	8001f24 <_fflush_r>
 800146c:	2800      	cmp	r0, #0
 800146e:	d1ed      	bne.n	800144c <__swbuf_r+0x2a>
 8001470:	68a3      	ldr	r3, [r4, #8]
 8001472:	3b01      	subs	r3, #1
 8001474:	60a3      	str	r3, [r4, #8]
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	6022      	str	r2, [r4, #0]
 800147c:	701e      	strb	r6, [r3, #0]
 800147e:	6962      	ldr	r2, [r4, #20]
 8001480:	1c43      	adds	r3, r0, #1
 8001482:	429a      	cmp	r2, r3
 8001484:	d004      	beq.n	8001490 <__swbuf_r+0x6e>
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	07db      	lsls	r3, r3, #31
 800148a:	d5e1      	bpl.n	8001450 <__swbuf_r+0x2e>
 800148c:	2e0a      	cmp	r6, #10
 800148e:	d1df      	bne.n	8001450 <__swbuf_r+0x2e>
 8001490:	4621      	mov	r1, r4
 8001492:	4628      	mov	r0, r5
 8001494:	f000 fd46 	bl	8001f24 <_fflush_r>
 8001498:	2800      	cmp	r0, #0
 800149a:	d0d9      	beq.n	8001450 <__swbuf_r+0x2e>
 800149c:	e7d6      	b.n	800144c <__swbuf_r+0x2a>
	...

080014a0 <__swsetup_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <__swsetup_r+0xa8>)
 80014a4:	4605      	mov	r5, r0
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	460c      	mov	r4, r1
 80014aa:	b118      	cbz	r0, 80014b4 <__swsetup_r+0x14>
 80014ac:	6a03      	ldr	r3, [r0, #32]
 80014ae:	b90b      	cbnz	r3, 80014b4 <__swsetup_r+0x14>
 80014b0:	f7ff fece 	bl	8001250 <__sinit>
 80014b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b8:	0719      	lsls	r1, r3, #28
 80014ba:	d422      	bmi.n	8001502 <__swsetup_r+0x62>
 80014bc:	06da      	lsls	r2, r3, #27
 80014be:	d407      	bmi.n	80014d0 <__swsetup_r+0x30>
 80014c0:	2209      	movs	r2, #9
 80014c2:	602a      	str	r2, [r5, #0]
 80014c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014c8:	81a3      	strh	r3, [r4, #12]
 80014ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ce:	e033      	b.n	8001538 <__swsetup_r+0x98>
 80014d0:	0758      	lsls	r0, r3, #29
 80014d2:	d512      	bpl.n	80014fa <__swsetup_r+0x5a>
 80014d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80014d6:	b141      	cbz	r1, 80014ea <__swsetup_r+0x4a>
 80014d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014dc:	4299      	cmp	r1, r3
 80014de:	d002      	beq.n	80014e6 <__swsetup_r+0x46>
 80014e0:	4628      	mov	r0, r5
 80014e2:	f000 f8cd 	bl	8001680 <_free_r>
 80014e6:	2300      	movs	r3, #0
 80014e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80014f0:	81a3      	strh	r3, [r4, #12]
 80014f2:	2300      	movs	r3, #0
 80014f4:	6063      	str	r3, [r4, #4]
 80014f6:	6923      	ldr	r3, [r4, #16]
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	89a3      	ldrh	r3, [r4, #12]
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	81a3      	strh	r3, [r4, #12]
 8001502:	6923      	ldr	r3, [r4, #16]
 8001504:	b94b      	cbnz	r3, 800151a <__swsetup_r+0x7a>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800150c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001510:	d003      	beq.n	800151a <__swsetup_r+0x7a>
 8001512:	4621      	mov	r1, r4
 8001514:	4628      	mov	r0, r5
 8001516:	f000 fd65 	bl	8001fe4 <__smakebuf_r>
 800151a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800151e:	f013 0201 	ands.w	r2, r3, #1
 8001522:	d00a      	beq.n	800153a <__swsetup_r+0x9a>
 8001524:	2200      	movs	r2, #0
 8001526:	60a2      	str	r2, [r4, #8]
 8001528:	6962      	ldr	r2, [r4, #20]
 800152a:	4252      	negs	r2, r2
 800152c:	61a2      	str	r2, [r4, #24]
 800152e:	6922      	ldr	r2, [r4, #16]
 8001530:	b942      	cbnz	r2, 8001544 <__swsetup_r+0xa4>
 8001532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001536:	d1c5      	bne.n	80014c4 <__swsetup_r+0x24>
 8001538:	bd38      	pop	{r3, r4, r5, pc}
 800153a:	0799      	lsls	r1, r3, #30
 800153c:	bf58      	it	pl
 800153e:	6962      	ldrpl	r2, [r4, #20]
 8001540:	60a2      	str	r2, [r4, #8]
 8001542:	e7f4      	b.n	800152e <__swsetup_r+0x8e>
 8001544:	2000      	movs	r0, #0
 8001546:	e7f7      	b.n	8001538 <__swsetup_r+0x98>
 8001548:	20000010 	.word	0x20000010

0800154c <memset>:
 800154c:	4402      	add	r2, r0
 800154e:	4603      	mov	r3, r0
 8001550:	4293      	cmp	r3, r2
 8001552:	d100      	bne.n	8001556 <memset+0xa>
 8001554:	4770      	bx	lr
 8001556:	f803 1b01 	strb.w	r1, [r3], #1
 800155a:	e7f9      	b.n	8001550 <memset+0x4>

0800155c <_close_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d06      	ldr	r5, [pc, #24]	@ (8001578 <_close_r+0x1c>)
 8001560:	2300      	movs	r3, #0
 8001562:	4604      	mov	r4, r0
 8001564:	4608      	mov	r0, r1
 8001566:	602b      	str	r3, [r5, #0]
 8001568:	f7ff fcd3 	bl	8000f12 <_close>
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	d102      	bne.n	8001576 <_close_r+0x1a>
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	b103      	cbz	r3, 8001576 <_close_r+0x1a>
 8001574:	6023      	str	r3, [r4, #0]
 8001576:	bd38      	pop	{r3, r4, r5, pc}
 8001578:	20000218 	.word	0x20000218

0800157c <_lseek_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4d07      	ldr	r5, [pc, #28]	@ (800159c <_lseek_r+0x20>)
 8001580:	4604      	mov	r4, r0
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	2200      	movs	r2, #0
 8001588:	602a      	str	r2, [r5, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	f7ff fce8 	bl	8000f60 <_lseek>
 8001590:	1c43      	adds	r3, r0, #1
 8001592:	d102      	bne.n	800159a <_lseek_r+0x1e>
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	b103      	cbz	r3, 800159a <_lseek_r+0x1e>
 8001598:	6023      	str	r3, [r4, #0]
 800159a:	bd38      	pop	{r3, r4, r5, pc}
 800159c:	20000218 	.word	0x20000218

080015a0 <_read_r>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4d07      	ldr	r5, [pc, #28]	@ (80015c0 <_read_r+0x20>)
 80015a4:	4604      	mov	r4, r0
 80015a6:	4608      	mov	r0, r1
 80015a8:	4611      	mov	r1, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	602a      	str	r2, [r5, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f7ff fc92 	bl	8000ed8 <_read>
 80015b4:	1c43      	adds	r3, r0, #1
 80015b6:	d102      	bne.n	80015be <_read_r+0x1e>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	b103      	cbz	r3, 80015be <_read_r+0x1e>
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	20000218 	.word	0x20000218

080015c4 <_write_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4d07      	ldr	r5, [pc, #28]	@ (80015e4 <_write_r+0x20>)
 80015c8:	4604      	mov	r4, r0
 80015ca:	4608      	mov	r0, r1
 80015cc:	4611      	mov	r1, r2
 80015ce:	2200      	movs	r2, #0
 80015d0:	602a      	str	r2, [r5, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	f7fe ffae 	bl	8000534 <_write>
 80015d8:	1c43      	adds	r3, r0, #1
 80015da:	d102      	bne.n	80015e2 <_write_r+0x1e>
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	b103      	cbz	r3, 80015e2 <_write_r+0x1e>
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
 80015e4:	20000218 	.word	0x20000218

080015e8 <__errno>:
 80015e8:	4b01      	ldr	r3, [pc, #4]	@ (80015f0 <__errno+0x8>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000010 	.word	0x20000010

080015f4 <__libc_init_array>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4d0d      	ldr	r5, [pc, #52]	@ (800162c <__libc_init_array+0x38>)
 80015f8:	4c0d      	ldr	r4, [pc, #52]	@ (8001630 <__libc_init_array+0x3c>)
 80015fa:	1b64      	subs	r4, r4, r5
 80015fc:	10a4      	asrs	r4, r4, #2
 80015fe:	2600      	movs	r6, #0
 8001600:	42a6      	cmp	r6, r4
 8001602:	d109      	bne.n	8001618 <__libc_init_array+0x24>
 8001604:	4d0b      	ldr	r5, [pc, #44]	@ (8001634 <__libc_init_array+0x40>)
 8001606:	4c0c      	ldr	r4, [pc, #48]	@ (8001638 <__libc_init_array+0x44>)
 8001608:	f000 fda6 	bl	8002158 <_init>
 800160c:	1b64      	subs	r4, r4, r5
 800160e:	10a4      	asrs	r4, r4, #2
 8001610:	2600      	movs	r6, #0
 8001612:	42a6      	cmp	r6, r4
 8001614:	d105      	bne.n	8001622 <__libc_init_array+0x2e>
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	f855 3b04 	ldr.w	r3, [r5], #4
 800161c:	4798      	blx	r3
 800161e:	3601      	adds	r6, #1
 8001620:	e7ee      	b.n	8001600 <__libc_init_array+0xc>
 8001622:	f855 3b04 	ldr.w	r3, [r5], #4
 8001626:	4798      	blx	r3
 8001628:	3601      	adds	r6, #1
 800162a:	e7f2      	b.n	8001612 <__libc_init_array+0x1e>
 800162c:	0800236c 	.word	0x0800236c
 8001630:	0800236c 	.word	0x0800236c
 8001634:	0800236c 	.word	0x0800236c
 8001638:	08002370 	.word	0x08002370

0800163c <__retarget_lock_init_recursive>:
 800163c:	4770      	bx	lr

0800163e <__retarget_lock_acquire_recursive>:
 800163e:	4770      	bx	lr

08001640 <__retarget_lock_release_recursive>:
 8001640:	4770      	bx	lr
	...

08001644 <__assert_func>:
 8001644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001646:	4614      	mov	r4, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <__assert_func+0x2c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4605      	mov	r5, r0
 8001650:	68d8      	ldr	r0, [r3, #12]
 8001652:	b14c      	cbz	r4, 8001668 <__assert_func+0x24>
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <__assert_func+0x30>)
 8001656:	9100      	str	r1, [sp, #0]
 8001658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800165c:	4906      	ldr	r1, [pc, #24]	@ (8001678 <__assert_func+0x34>)
 800165e:	462b      	mov	r3, r5
 8001660:	f000 fc88 	bl	8001f74 <fiprintf>
 8001664:	f000 fd2c 	bl	80020c0 <abort>
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <__assert_func+0x38>)
 800166a:	461c      	mov	r4, r3
 800166c:	e7f3      	b.n	8001656 <__assert_func+0x12>
 800166e:	bf00      	nop
 8001670:	20000010 	.word	0x20000010
 8001674:	080022f3 	.word	0x080022f3
 8001678:	08002300 	.word	0x08002300
 800167c:	0800232e 	.word	0x0800232e

08001680 <_free_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4605      	mov	r5, r0
 8001684:	2900      	cmp	r1, #0
 8001686:	d041      	beq.n	800170c <_free_r+0x8c>
 8001688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800168c:	1f0c      	subs	r4, r1, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	18e4      	addlt	r4, r4, r3
 8001694:	f000 f8e8 	bl	8001868 <__malloc_lock>
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <_free_r+0x90>)
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	b933      	cbnz	r3, 80016ac <_free_r+0x2c>
 800169e:	6063      	str	r3, [r4, #4]
 80016a0:	6014      	str	r4, [r2, #0]
 80016a2:	4628      	mov	r0, r5
 80016a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016a8:	f000 b8e4 	b.w	8001874 <__malloc_unlock>
 80016ac:	42a3      	cmp	r3, r4
 80016ae:	d908      	bls.n	80016c2 <_free_r+0x42>
 80016b0:	6820      	ldr	r0, [r4, #0]
 80016b2:	1821      	adds	r1, r4, r0
 80016b4:	428b      	cmp	r3, r1
 80016b6:	bf01      	itttt	eq
 80016b8:	6819      	ldreq	r1, [r3, #0]
 80016ba:	685b      	ldreq	r3, [r3, #4]
 80016bc:	1809      	addeq	r1, r1, r0
 80016be:	6021      	streq	r1, [r4, #0]
 80016c0:	e7ed      	b.n	800169e <_free_r+0x1e>
 80016c2:	461a      	mov	r2, r3
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	b10b      	cbz	r3, 80016cc <_free_r+0x4c>
 80016c8:	42a3      	cmp	r3, r4
 80016ca:	d9fa      	bls.n	80016c2 <_free_r+0x42>
 80016cc:	6811      	ldr	r1, [r2, #0]
 80016ce:	1850      	adds	r0, r2, r1
 80016d0:	42a0      	cmp	r0, r4
 80016d2:	d10b      	bne.n	80016ec <_free_r+0x6c>
 80016d4:	6820      	ldr	r0, [r4, #0]
 80016d6:	4401      	add	r1, r0
 80016d8:	1850      	adds	r0, r2, r1
 80016da:	4283      	cmp	r3, r0
 80016dc:	6011      	str	r1, [r2, #0]
 80016de:	d1e0      	bne.n	80016a2 <_free_r+0x22>
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	6053      	str	r3, [r2, #4]
 80016e6:	4408      	add	r0, r1
 80016e8:	6010      	str	r0, [r2, #0]
 80016ea:	e7da      	b.n	80016a2 <_free_r+0x22>
 80016ec:	d902      	bls.n	80016f4 <_free_r+0x74>
 80016ee:	230c      	movs	r3, #12
 80016f0:	602b      	str	r3, [r5, #0]
 80016f2:	e7d6      	b.n	80016a2 <_free_r+0x22>
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	1821      	adds	r1, r4, r0
 80016f8:	428b      	cmp	r3, r1
 80016fa:	bf04      	itt	eq
 80016fc:	6819      	ldreq	r1, [r3, #0]
 80016fe:	685b      	ldreq	r3, [r3, #4]
 8001700:	6063      	str	r3, [r4, #4]
 8001702:	bf04      	itt	eq
 8001704:	1809      	addeq	r1, r1, r0
 8001706:	6021      	streq	r1, [r4, #0]
 8001708:	6054      	str	r4, [r2, #4]
 800170a:	e7ca      	b.n	80016a2 <_free_r+0x22>
 800170c:	bd38      	pop	{r3, r4, r5, pc}
 800170e:	bf00      	nop
 8001710:	20000224 	.word	0x20000224

08001714 <malloc>:
 8001714:	4b02      	ldr	r3, [pc, #8]	@ (8001720 <malloc+0xc>)
 8001716:	4601      	mov	r1, r0
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f000 b825 	b.w	8001768 <_malloc_r>
 800171e:	bf00      	nop
 8001720:	20000010 	.word	0x20000010

08001724 <sbrk_aligned>:
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	4e0f      	ldr	r6, [pc, #60]	@ (8001764 <sbrk_aligned+0x40>)
 8001728:	460c      	mov	r4, r1
 800172a:	6831      	ldr	r1, [r6, #0]
 800172c:	4605      	mov	r5, r0
 800172e:	b911      	cbnz	r1, 8001736 <sbrk_aligned+0x12>
 8001730:	f000 fcb6 	bl	80020a0 <_sbrk_r>
 8001734:	6030      	str	r0, [r6, #0]
 8001736:	4621      	mov	r1, r4
 8001738:	4628      	mov	r0, r5
 800173a:	f000 fcb1 	bl	80020a0 <_sbrk_r>
 800173e:	1c43      	adds	r3, r0, #1
 8001740:	d103      	bne.n	800174a <sbrk_aligned+0x26>
 8001742:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001746:	4620      	mov	r0, r4
 8001748:	bd70      	pop	{r4, r5, r6, pc}
 800174a:	1cc4      	adds	r4, r0, #3
 800174c:	f024 0403 	bic.w	r4, r4, #3
 8001750:	42a0      	cmp	r0, r4
 8001752:	d0f8      	beq.n	8001746 <sbrk_aligned+0x22>
 8001754:	1a21      	subs	r1, r4, r0
 8001756:	4628      	mov	r0, r5
 8001758:	f000 fca2 	bl	80020a0 <_sbrk_r>
 800175c:	3001      	adds	r0, #1
 800175e:	d1f2      	bne.n	8001746 <sbrk_aligned+0x22>
 8001760:	e7ef      	b.n	8001742 <sbrk_aligned+0x1e>
 8001762:	bf00      	nop
 8001764:	20000220 	.word	0x20000220

08001768 <_malloc_r>:
 8001768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800176c:	1ccd      	adds	r5, r1, #3
 800176e:	f025 0503 	bic.w	r5, r5, #3
 8001772:	3508      	adds	r5, #8
 8001774:	2d0c      	cmp	r5, #12
 8001776:	bf38      	it	cc
 8001778:	250c      	movcc	r5, #12
 800177a:	2d00      	cmp	r5, #0
 800177c:	4606      	mov	r6, r0
 800177e:	db01      	blt.n	8001784 <_malloc_r+0x1c>
 8001780:	42a9      	cmp	r1, r5
 8001782:	d904      	bls.n	800178e <_malloc_r+0x26>
 8001784:	230c      	movs	r3, #12
 8001786:	6033      	str	r3, [r6, #0]
 8001788:	2000      	movs	r0, #0
 800178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800178e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001864 <_malloc_r+0xfc>
 8001792:	f000 f869 	bl	8001868 <__malloc_lock>
 8001796:	f8d8 3000 	ldr.w	r3, [r8]
 800179a:	461c      	mov	r4, r3
 800179c:	bb44      	cbnz	r4, 80017f0 <_malloc_r+0x88>
 800179e:	4629      	mov	r1, r5
 80017a0:	4630      	mov	r0, r6
 80017a2:	f7ff ffbf 	bl	8001724 <sbrk_aligned>
 80017a6:	1c43      	adds	r3, r0, #1
 80017a8:	4604      	mov	r4, r0
 80017aa:	d158      	bne.n	800185e <_malloc_r+0xf6>
 80017ac:	f8d8 4000 	ldr.w	r4, [r8]
 80017b0:	4627      	mov	r7, r4
 80017b2:	2f00      	cmp	r7, #0
 80017b4:	d143      	bne.n	800183e <_malloc_r+0xd6>
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d04b      	beq.n	8001852 <_malloc_r+0xea>
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	4639      	mov	r1, r7
 80017be:	4630      	mov	r0, r6
 80017c0:	eb04 0903 	add.w	r9, r4, r3
 80017c4:	f000 fc6c 	bl	80020a0 <_sbrk_r>
 80017c8:	4581      	cmp	r9, r0
 80017ca:	d142      	bne.n	8001852 <_malloc_r+0xea>
 80017cc:	6821      	ldr	r1, [r4, #0]
 80017ce:	1a6d      	subs	r5, r5, r1
 80017d0:	4629      	mov	r1, r5
 80017d2:	4630      	mov	r0, r6
 80017d4:	f7ff ffa6 	bl	8001724 <sbrk_aligned>
 80017d8:	3001      	adds	r0, #1
 80017da:	d03a      	beq.n	8001852 <_malloc_r+0xea>
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	442b      	add	r3, r5
 80017e0:	6023      	str	r3, [r4, #0]
 80017e2:	f8d8 3000 	ldr.w	r3, [r8]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	bb62      	cbnz	r2, 8001844 <_malloc_r+0xdc>
 80017ea:	f8c8 7000 	str.w	r7, [r8]
 80017ee:	e00f      	b.n	8001810 <_malloc_r+0xa8>
 80017f0:	6822      	ldr	r2, [r4, #0]
 80017f2:	1b52      	subs	r2, r2, r5
 80017f4:	d420      	bmi.n	8001838 <_malloc_r+0xd0>
 80017f6:	2a0b      	cmp	r2, #11
 80017f8:	d917      	bls.n	800182a <_malloc_r+0xc2>
 80017fa:	1961      	adds	r1, r4, r5
 80017fc:	42a3      	cmp	r3, r4
 80017fe:	6025      	str	r5, [r4, #0]
 8001800:	bf18      	it	ne
 8001802:	6059      	strne	r1, [r3, #4]
 8001804:	6863      	ldr	r3, [r4, #4]
 8001806:	bf08      	it	eq
 8001808:	f8c8 1000 	streq.w	r1, [r8]
 800180c:	5162      	str	r2, [r4, r5]
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	4630      	mov	r0, r6
 8001812:	f000 f82f 	bl	8001874 <__malloc_unlock>
 8001816:	f104 000b 	add.w	r0, r4, #11
 800181a:	1d23      	adds	r3, r4, #4
 800181c:	f020 0007 	bic.w	r0, r0, #7
 8001820:	1ac2      	subs	r2, r0, r3
 8001822:	bf1c      	itt	ne
 8001824:	1a1b      	subne	r3, r3, r0
 8001826:	50a3      	strne	r3, [r4, r2]
 8001828:	e7af      	b.n	800178a <_malloc_r+0x22>
 800182a:	6862      	ldr	r2, [r4, #4]
 800182c:	42a3      	cmp	r3, r4
 800182e:	bf0c      	ite	eq
 8001830:	f8c8 2000 	streq.w	r2, [r8]
 8001834:	605a      	strne	r2, [r3, #4]
 8001836:	e7eb      	b.n	8001810 <_malloc_r+0xa8>
 8001838:	4623      	mov	r3, r4
 800183a:	6864      	ldr	r4, [r4, #4]
 800183c:	e7ae      	b.n	800179c <_malloc_r+0x34>
 800183e:	463c      	mov	r4, r7
 8001840:	687f      	ldr	r7, [r7, #4]
 8001842:	e7b6      	b.n	80017b2 <_malloc_r+0x4a>
 8001844:	461a      	mov	r2, r3
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	42a3      	cmp	r3, r4
 800184a:	d1fb      	bne.n	8001844 <_malloc_r+0xdc>
 800184c:	2300      	movs	r3, #0
 800184e:	6053      	str	r3, [r2, #4]
 8001850:	e7de      	b.n	8001810 <_malloc_r+0xa8>
 8001852:	230c      	movs	r3, #12
 8001854:	6033      	str	r3, [r6, #0]
 8001856:	4630      	mov	r0, r6
 8001858:	f000 f80c 	bl	8001874 <__malloc_unlock>
 800185c:	e794      	b.n	8001788 <_malloc_r+0x20>
 800185e:	6005      	str	r5, [r0, #0]
 8001860:	e7d6      	b.n	8001810 <_malloc_r+0xa8>
 8001862:	bf00      	nop
 8001864:	20000224 	.word	0x20000224

08001868 <__malloc_lock>:
 8001868:	4801      	ldr	r0, [pc, #4]	@ (8001870 <__malloc_lock+0x8>)
 800186a:	f7ff bee8 	b.w	800163e <__retarget_lock_acquire_recursive>
 800186e:	bf00      	nop
 8001870:	2000021c 	.word	0x2000021c

08001874 <__malloc_unlock>:
 8001874:	4801      	ldr	r0, [pc, #4]	@ (800187c <__malloc_unlock+0x8>)
 8001876:	f7ff bee3 	b.w	8001640 <__retarget_lock_release_recursive>
 800187a:	bf00      	nop
 800187c:	2000021c 	.word	0x2000021c

08001880 <__sfputc_r>:
 8001880:	6893      	ldr	r3, [r2, #8]
 8001882:	3b01      	subs	r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	b410      	push	{r4}
 8001888:	6093      	str	r3, [r2, #8]
 800188a:	da08      	bge.n	800189e <__sfputc_r+0x1e>
 800188c:	6994      	ldr	r4, [r2, #24]
 800188e:	42a3      	cmp	r3, r4
 8001890:	db01      	blt.n	8001896 <__sfputc_r+0x16>
 8001892:	290a      	cmp	r1, #10
 8001894:	d103      	bne.n	800189e <__sfputc_r+0x1e>
 8001896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800189a:	f7ff bdc2 	b.w	8001422 <__swbuf_r>
 800189e:	6813      	ldr	r3, [r2, #0]
 80018a0:	1c58      	adds	r0, r3, #1
 80018a2:	6010      	str	r0, [r2, #0]
 80018a4:	7019      	strb	r1, [r3, #0]
 80018a6:	4608      	mov	r0, r1
 80018a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <__sfputs_r>:
 80018ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b0:	4606      	mov	r6, r0
 80018b2:	460f      	mov	r7, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	18d5      	adds	r5, r2, r3
 80018b8:	42ac      	cmp	r4, r5
 80018ba:	d101      	bne.n	80018c0 <__sfputs_r+0x12>
 80018bc:	2000      	movs	r0, #0
 80018be:	e007      	b.n	80018d0 <__sfputs_r+0x22>
 80018c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018c4:	463a      	mov	r2, r7
 80018c6:	4630      	mov	r0, r6
 80018c8:	f7ff ffda 	bl	8001880 <__sfputc_r>
 80018cc:	1c43      	adds	r3, r0, #1
 80018ce:	d1f3      	bne.n	80018b8 <__sfputs_r+0xa>
 80018d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018d4 <_vfiprintf_r>:
 80018d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d8:	460d      	mov	r5, r1
 80018da:	b09d      	sub	sp, #116	@ 0x74
 80018dc:	4614      	mov	r4, r2
 80018de:	4698      	mov	r8, r3
 80018e0:	4606      	mov	r6, r0
 80018e2:	b118      	cbz	r0, 80018ec <_vfiprintf_r+0x18>
 80018e4:	6a03      	ldr	r3, [r0, #32]
 80018e6:	b90b      	cbnz	r3, 80018ec <_vfiprintf_r+0x18>
 80018e8:	f7ff fcb2 	bl	8001250 <__sinit>
 80018ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018ee:	07d9      	lsls	r1, r3, #31
 80018f0:	d405      	bmi.n	80018fe <_vfiprintf_r+0x2a>
 80018f2:	89ab      	ldrh	r3, [r5, #12]
 80018f4:	059a      	lsls	r2, r3, #22
 80018f6:	d402      	bmi.n	80018fe <_vfiprintf_r+0x2a>
 80018f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80018fa:	f7ff fea0 	bl	800163e <__retarget_lock_acquire_recursive>
 80018fe:	89ab      	ldrh	r3, [r5, #12]
 8001900:	071b      	lsls	r3, r3, #28
 8001902:	d501      	bpl.n	8001908 <_vfiprintf_r+0x34>
 8001904:	692b      	ldr	r3, [r5, #16]
 8001906:	b99b      	cbnz	r3, 8001930 <_vfiprintf_r+0x5c>
 8001908:	4629      	mov	r1, r5
 800190a:	4630      	mov	r0, r6
 800190c:	f7ff fdc8 	bl	80014a0 <__swsetup_r>
 8001910:	b170      	cbz	r0, 8001930 <_vfiprintf_r+0x5c>
 8001912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001914:	07dc      	lsls	r4, r3, #31
 8001916:	d504      	bpl.n	8001922 <_vfiprintf_r+0x4e>
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800191c:	b01d      	add	sp, #116	@ 0x74
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001922:	89ab      	ldrh	r3, [r5, #12]
 8001924:	0598      	lsls	r0, r3, #22
 8001926:	d4f7      	bmi.n	8001918 <_vfiprintf_r+0x44>
 8001928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800192a:	f7ff fe89 	bl	8001640 <__retarget_lock_release_recursive>
 800192e:	e7f3      	b.n	8001918 <_vfiprintf_r+0x44>
 8001930:	2300      	movs	r3, #0
 8001932:	9309      	str	r3, [sp, #36]	@ 0x24
 8001934:	2320      	movs	r3, #32
 8001936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800193a:	f8cd 800c 	str.w	r8, [sp, #12]
 800193e:	2330      	movs	r3, #48	@ 0x30
 8001940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001af0 <_vfiprintf_r+0x21c>
 8001944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001948:	f04f 0901 	mov.w	r9, #1
 800194c:	4623      	mov	r3, r4
 800194e:	469a      	mov	sl, r3
 8001950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001954:	b10a      	cbz	r2, 800195a <_vfiprintf_r+0x86>
 8001956:	2a25      	cmp	r2, #37	@ 0x25
 8001958:	d1f9      	bne.n	800194e <_vfiprintf_r+0x7a>
 800195a:	ebba 0b04 	subs.w	fp, sl, r4
 800195e:	d00b      	beq.n	8001978 <_vfiprintf_r+0xa4>
 8001960:	465b      	mov	r3, fp
 8001962:	4622      	mov	r2, r4
 8001964:	4629      	mov	r1, r5
 8001966:	4630      	mov	r0, r6
 8001968:	f7ff ffa1 	bl	80018ae <__sfputs_r>
 800196c:	3001      	adds	r0, #1
 800196e:	f000 80a7 	beq.w	8001ac0 <_vfiprintf_r+0x1ec>
 8001972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001974:	445a      	add	r2, fp
 8001976:	9209      	str	r2, [sp, #36]	@ 0x24
 8001978:	f89a 3000 	ldrb.w	r3, [sl]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 809f 	beq.w	8001ac0 <_vfiprintf_r+0x1ec>
 8001982:	2300      	movs	r3, #0
 8001984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800198c:	f10a 0a01 	add.w	sl, sl, #1
 8001990:	9304      	str	r3, [sp, #16]
 8001992:	9307      	str	r3, [sp, #28]
 8001994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001998:	931a      	str	r3, [sp, #104]	@ 0x68
 800199a:	4654      	mov	r4, sl
 800199c:	2205      	movs	r2, #5
 800199e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019a2:	4853      	ldr	r0, [pc, #332]	@ (8001af0 <_vfiprintf_r+0x21c>)
 80019a4:	f7fe fc14 	bl	80001d0 <memchr>
 80019a8:	9a04      	ldr	r2, [sp, #16]
 80019aa:	b9d8      	cbnz	r0, 80019e4 <_vfiprintf_r+0x110>
 80019ac:	06d1      	lsls	r1, r2, #27
 80019ae:	bf44      	itt	mi
 80019b0:	2320      	movmi	r3, #32
 80019b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019b6:	0713      	lsls	r3, r2, #28
 80019b8:	bf44      	itt	mi
 80019ba:	232b      	movmi	r3, #43	@ 0x2b
 80019bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019c0:	f89a 3000 	ldrb.w	r3, [sl]
 80019c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80019c6:	d015      	beq.n	80019f4 <_vfiprintf_r+0x120>
 80019c8:	9a07      	ldr	r2, [sp, #28]
 80019ca:	4654      	mov	r4, sl
 80019cc:	2000      	movs	r0, #0
 80019ce:	f04f 0c0a 	mov.w	ip, #10
 80019d2:	4621      	mov	r1, r4
 80019d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019d8:	3b30      	subs	r3, #48	@ 0x30
 80019da:	2b09      	cmp	r3, #9
 80019dc:	d94b      	bls.n	8001a76 <_vfiprintf_r+0x1a2>
 80019de:	b1b0      	cbz	r0, 8001a0e <_vfiprintf_r+0x13a>
 80019e0:	9207      	str	r2, [sp, #28]
 80019e2:	e014      	b.n	8001a0e <_vfiprintf_r+0x13a>
 80019e4:	eba0 0308 	sub.w	r3, r0, r8
 80019e8:	fa09 f303 	lsl.w	r3, r9, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	9304      	str	r3, [sp, #16]
 80019f0:	46a2      	mov	sl, r4
 80019f2:	e7d2      	b.n	800199a <_vfiprintf_r+0xc6>
 80019f4:	9b03      	ldr	r3, [sp, #12]
 80019f6:	1d19      	adds	r1, r3, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	9103      	str	r1, [sp, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bfbb      	ittet	lt
 8001a00:	425b      	neglt	r3, r3
 8001a02:	f042 0202 	orrlt.w	r2, r2, #2
 8001a06:	9307      	strge	r3, [sp, #28]
 8001a08:	9307      	strlt	r3, [sp, #28]
 8001a0a:	bfb8      	it	lt
 8001a0c:	9204      	strlt	r2, [sp, #16]
 8001a0e:	7823      	ldrb	r3, [r4, #0]
 8001a10:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a12:	d10a      	bne.n	8001a2a <_vfiprintf_r+0x156>
 8001a14:	7863      	ldrb	r3, [r4, #1]
 8001a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a18:	d132      	bne.n	8001a80 <_vfiprintf_r+0x1ac>
 8001a1a:	9b03      	ldr	r3, [sp, #12]
 8001a1c:	1d1a      	adds	r2, r3, #4
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	9203      	str	r2, [sp, #12]
 8001a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a26:	3402      	adds	r4, #2
 8001a28:	9305      	str	r3, [sp, #20]
 8001a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b00 <_vfiprintf_r+0x22c>
 8001a2e:	7821      	ldrb	r1, [r4, #0]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4650      	mov	r0, sl
 8001a34:	f7fe fbcc 	bl	80001d0 <memchr>
 8001a38:	b138      	cbz	r0, 8001a4a <_vfiprintf_r+0x176>
 8001a3a:	9b04      	ldr	r3, [sp, #16]
 8001a3c:	eba0 000a 	sub.w	r0, r0, sl
 8001a40:	2240      	movs	r2, #64	@ 0x40
 8001a42:	4082      	lsls	r2, r0
 8001a44:	4313      	orrs	r3, r2
 8001a46:	3401      	adds	r4, #1
 8001a48:	9304      	str	r3, [sp, #16]
 8001a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a4e:	4829      	ldr	r0, [pc, #164]	@ (8001af4 <_vfiprintf_r+0x220>)
 8001a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a54:	2206      	movs	r2, #6
 8001a56:	f7fe fbbb 	bl	80001d0 <memchr>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d03f      	beq.n	8001ade <_vfiprintf_r+0x20a>
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <_vfiprintf_r+0x224>)
 8001a60:	bb1b      	cbnz	r3, 8001aaa <_vfiprintf_r+0x1d6>
 8001a62:	9b03      	ldr	r3, [sp, #12]
 8001a64:	3307      	adds	r3, #7
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	9303      	str	r3, [sp, #12]
 8001a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a70:	443b      	add	r3, r7
 8001a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a74:	e76a      	b.n	800194c <_vfiprintf_r+0x78>
 8001a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	e7a8      	b.n	80019d2 <_vfiprintf_r+0xfe>
 8001a80:	2300      	movs	r3, #0
 8001a82:	3401      	adds	r4, #1
 8001a84:	9305      	str	r3, [sp, #20]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0c0a 	mov.w	ip, #10
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a92:	3a30      	subs	r2, #48	@ 0x30
 8001a94:	2a09      	cmp	r2, #9
 8001a96:	d903      	bls.n	8001aa0 <_vfiprintf_r+0x1cc>
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0c6      	beq.n	8001a2a <_vfiprintf_r+0x156>
 8001a9c:	9105      	str	r1, [sp, #20]
 8001a9e:	e7c4      	b.n	8001a2a <_vfiprintf_r+0x156>
 8001aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e7f0      	b.n	8001a8c <_vfiprintf_r+0x1b8>
 8001aaa:	ab03      	add	r3, sp, #12
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	462a      	mov	r2, r5
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <_vfiprintf_r+0x228>)
 8001ab2:	a904      	add	r1, sp, #16
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	f3af 8000 	nop.w
 8001aba:	4607      	mov	r7, r0
 8001abc:	1c78      	adds	r0, r7, #1
 8001abe:	d1d6      	bne.n	8001a6e <_vfiprintf_r+0x19a>
 8001ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ac2:	07d9      	lsls	r1, r3, #31
 8001ac4:	d405      	bmi.n	8001ad2 <_vfiprintf_r+0x1fe>
 8001ac6:	89ab      	ldrh	r3, [r5, #12]
 8001ac8:	059a      	lsls	r2, r3, #22
 8001aca:	d402      	bmi.n	8001ad2 <_vfiprintf_r+0x1fe>
 8001acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ace:	f7ff fdb7 	bl	8001640 <__retarget_lock_release_recursive>
 8001ad2:	89ab      	ldrh	r3, [r5, #12]
 8001ad4:	065b      	lsls	r3, r3, #25
 8001ad6:	f53f af1f 	bmi.w	8001918 <_vfiprintf_r+0x44>
 8001ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001adc:	e71e      	b.n	800191c <_vfiprintf_r+0x48>
 8001ade:	ab03      	add	r3, sp, #12
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	462a      	mov	r2, r5
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <_vfiprintf_r+0x228>)
 8001ae6:	a904      	add	r1, sp, #16
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f000 f879 	bl	8001be0 <_printf_i>
 8001aee:	e7e4      	b.n	8001aba <_vfiprintf_r+0x1e6>
 8001af0:	0800232f 	.word	0x0800232f
 8001af4:	08002339 	.word	0x08002339
 8001af8:	00000000 	.word	0x00000000
 8001afc:	080018af 	.word	0x080018af
 8001b00:	08002335 	.word	0x08002335

08001b04 <_printf_common>:
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	4616      	mov	r6, r2
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	688a      	ldr	r2, [r1, #8]
 8001b0e:	690b      	ldr	r3, [r1, #16]
 8001b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	bfb8      	it	lt
 8001b18:	4613      	movlt	r3, r2
 8001b1a:	6033      	str	r3, [r6, #0]
 8001b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b20:	4607      	mov	r7, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	b10a      	cbz	r2, 8001b2a <_printf_common+0x26>
 8001b26:	3301      	adds	r3, #1
 8001b28:	6033      	str	r3, [r6, #0]
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	0699      	lsls	r1, r3, #26
 8001b2e:	bf42      	ittt	mi
 8001b30:	6833      	ldrmi	r3, [r6, #0]
 8001b32:	3302      	addmi	r3, #2
 8001b34:	6033      	strmi	r3, [r6, #0]
 8001b36:	6825      	ldr	r5, [r4, #0]
 8001b38:	f015 0506 	ands.w	r5, r5, #6
 8001b3c:	d106      	bne.n	8001b4c <_printf_common+0x48>
 8001b3e:	f104 0a19 	add.w	sl, r4, #25
 8001b42:	68e3      	ldr	r3, [r4, #12]
 8001b44:	6832      	ldr	r2, [r6, #0]
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	42ab      	cmp	r3, r5
 8001b4a:	dc26      	bgt.n	8001b9a <_printf_common+0x96>
 8001b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b50:	6822      	ldr	r2, [r4, #0]
 8001b52:	3b00      	subs	r3, #0
 8001b54:	bf18      	it	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	0692      	lsls	r2, r2, #26
 8001b5a:	d42b      	bmi.n	8001bb4 <_printf_common+0xb0>
 8001b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b60:	4641      	mov	r1, r8
 8001b62:	4638      	mov	r0, r7
 8001b64:	47c8      	blx	r9
 8001b66:	3001      	adds	r0, #1
 8001b68:	d01e      	beq.n	8001ba8 <_printf_common+0xa4>
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	6922      	ldr	r2, [r4, #16]
 8001b6e:	f003 0306 	and.w	r3, r3, #6
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf02      	ittt	eq
 8001b76:	68e5      	ldreq	r5, [r4, #12]
 8001b78:	6833      	ldreq	r3, [r6, #0]
 8001b7a:	1aed      	subeq	r5, r5, r3
 8001b7c:	68a3      	ldr	r3, [r4, #8]
 8001b7e:	bf0c      	ite	eq
 8001b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b84:	2500      	movne	r5, #0
 8001b86:	4293      	cmp	r3, r2
 8001b88:	bfc4      	itt	gt
 8001b8a:	1a9b      	subgt	r3, r3, r2
 8001b8c:	18ed      	addgt	r5, r5, r3
 8001b8e:	2600      	movs	r6, #0
 8001b90:	341a      	adds	r4, #26
 8001b92:	42b5      	cmp	r5, r6
 8001b94:	d11a      	bne.n	8001bcc <_printf_common+0xc8>
 8001b96:	2000      	movs	r0, #0
 8001b98:	e008      	b.n	8001bac <_printf_common+0xa8>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4652      	mov	r2, sl
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	4638      	mov	r0, r7
 8001ba2:	47c8      	blx	r9
 8001ba4:	3001      	adds	r0, #1
 8001ba6:	d103      	bne.n	8001bb0 <_printf_common+0xac>
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bb0:	3501      	adds	r5, #1
 8001bb2:	e7c6      	b.n	8001b42 <_printf_common+0x3e>
 8001bb4:	18e1      	adds	r1, r4, r3
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	2030      	movs	r0, #48	@ 0x30
 8001bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001bbe:	4422      	add	r2, r4
 8001bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001bc8:	3302      	adds	r3, #2
 8001bca:	e7c7      	b.n	8001b5c <_printf_common+0x58>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	4622      	mov	r2, r4
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	47c8      	blx	r9
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	d0e6      	beq.n	8001ba8 <_printf_common+0xa4>
 8001bda:	3601      	adds	r6, #1
 8001bdc:	e7d9      	b.n	8001b92 <_printf_common+0x8e>
	...

08001be0 <_printf_i>:
 8001be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001be4:	7e0f      	ldrb	r7, [r1, #24]
 8001be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001be8:	2f78      	cmp	r7, #120	@ 0x78
 8001bea:	4691      	mov	r9, r2
 8001bec:	4680      	mov	r8, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001bf6:	d807      	bhi.n	8001c08 <_printf_i+0x28>
 8001bf8:	2f62      	cmp	r7, #98	@ 0x62
 8001bfa:	d80a      	bhi.n	8001c12 <_printf_i+0x32>
 8001bfc:	2f00      	cmp	r7, #0
 8001bfe:	f000 80d1 	beq.w	8001da4 <_printf_i+0x1c4>
 8001c02:	2f58      	cmp	r7, #88	@ 0x58
 8001c04:	f000 80b8 	beq.w	8001d78 <_printf_i+0x198>
 8001c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c10:	e03a      	b.n	8001c88 <_printf_i+0xa8>
 8001c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c16:	2b15      	cmp	r3, #21
 8001c18:	d8f6      	bhi.n	8001c08 <_printf_i+0x28>
 8001c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8001c20 <_printf_i+0x40>)
 8001c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c20:	08001c79 	.word	0x08001c79
 8001c24:	08001c8d 	.word	0x08001c8d
 8001c28:	08001c09 	.word	0x08001c09
 8001c2c:	08001c09 	.word	0x08001c09
 8001c30:	08001c09 	.word	0x08001c09
 8001c34:	08001c09 	.word	0x08001c09
 8001c38:	08001c8d 	.word	0x08001c8d
 8001c3c:	08001c09 	.word	0x08001c09
 8001c40:	08001c09 	.word	0x08001c09
 8001c44:	08001c09 	.word	0x08001c09
 8001c48:	08001c09 	.word	0x08001c09
 8001c4c:	08001d8b 	.word	0x08001d8b
 8001c50:	08001cb7 	.word	0x08001cb7
 8001c54:	08001d45 	.word	0x08001d45
 8001c58:	08001c09 	.word	0x08001c09
 8001c5c:	08001c09 	.word	0x08001c09
 8001c60:	08001dad 	.word	0x08001dad
 8001c64:	08001c09 	.word	0x08001c09
 8001c68:	08001cb7 	.word	0x08001cb7
 8001c6c:	08001c09 	.word	0x08001c09
 8001c70:	08001c09 	.word	0x08001c09
 8001c74:	08001d4d 	.word	0x08001d4d
 8001c78:	6833      	ldr	r3, [r6, #0]
 8001c7a:	1d1a      	adds	r2, r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6032      	str	r2, [r6, #0]
 8001c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e09c      	b.n	8001dc6 <_printf_i+0x1e6>
 8001c8c:	6833      	ldr	r3, [r6, #0]
 8001c8e:	6820      	ldr	r0, [r4, #0]
 8001c90:	1d19      	adds	r1, r3, #4
 8001c92:	6031      	str	r1, [r6, #0]
 8001c94:	0606      	lsls	r6, r0, #24
 8001c96:	d501      	bpl.n	8001c9c <_printf_i+0xbc>
 8001c98:	681d      	ldr	r5, [r3, #0]
 8001c9a:	e003      	b.n	8001ca4 <_printf_i+0xc4>
 8001c9c:	0645      	lsls	r5, r0, #25
 8001c9e:	d5fb      	bpl.n	8001c98 <_printf_i+0xb8>
 8001ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ca4:	2d00      	cmp	r5, #0
 8001ca6:	da03      	bge.n	8001cb0 <_printf_i+0xd0>
 8001ca8:	232d      	movs	r3, #45	@ 0x2d
 8001caa:	426d      	negs	r5, r5
 8001cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cb0:	4858      	ldr	r0, [pc, #352]	@ (8001e14 <_printf_i+0x234>)
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	e011      	b.n	8001cda <_printf_i+0xfa>
 8001cb6:	6821      	ldr	r1, [r4, #0]
 8001cb8:	6833      	ldr	r3, [r6, #0]
 8001cba:	0608      	lsls	r0, r1, #24
 8001cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cc0:	d402      	bmi.n	8001cc8 <_printf_i+0xe8>
 8001cc2:	0649      	lsls	r1, r1, #25
 8001cc4:	bf48      	it	mi
 8001cc6:	b2ad      	uxthmi	r5, r5
 8001cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001cca:	4852      	ldr	r0, [pc, #328]	@ (8001e14 <_printf_i+0x234>)
 8001ccc:	6033      	str	r3, [r6, #0]
 8001cce:	bf14      	ite	ne
 8001cd0:	230a      	movne	r3, #10
 8001cd2:	2308      	moveq	r3, #8
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001cda:	6866      	ldr	r6, [r4, #4]
 8001cdc:	60a6      	str	r6, [r4, #8]
 8001cde:	2e00      	cmp	r6, #0
 8001ce0:	db05      	blt.n	8001cee <_printf_i+0x10e>
 8001ce2:	6821      	ldr	r1, [r4, #0]
 8001ce4:	432e      	orrs	r6, r5
 8001ce6:	f021 0104 	bic.w	r1, r1, #4
 8001cea:	6021      	str	r1, [r4, #0]
 8001cec:	d04b      	beq.n	8001d86 <_printf_i+0x1a6>
 8001cee:	4616      	mov	r6, r2
 8001cf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001cf4:	fb03 5711 	mls	r7, r3, r1, r5
 8001cf8:	5dc7      	ldrb	r7, [r0, r7]
 8001cfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001cfe:	462f      	mov	r7, r5
 8001d00:	42bb      	cmp	r3, r7
 8001d02:	460d      	mov	r5, r1
 8001d04:	d9f4      	bls.n	8001cf0 <_printf_i+0x110>
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d10b      	bne.n	8001d22 <_printf_i+0x142>
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	07df      	lsls	r7, r3, #31
 8001d0e:	d508      	bpl.n	8001d22 <_printf_i+0x142>
 8001d10:	6923      	ldr	r3, [r4, #16]
 8001d12:	6861      	ldr	r1, [r4, #4]
 8001d14:	4299      	cmp	r1, r3
 8001d16:	bfde      	ittt	le
 8001d18:	2330      	movle	r3, #48	@ 0x30
 8001d1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001d22:	1b92      	subs	r2, r2, r6
 8001d24:	6122      	str	r2, [r4, #16]
 8001d26:	f8cd a000 	str.w	sl, [sp]
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	aa03      	add	r2, sp, #12
 8001d2e:	4621      	mov	r1, r4
 8001d30:	4640      	mov	r0, r8
 8001d32:	f7ff fee7 	bl	8001b04 <_printf_common>
 8001d36:	3001      	adds	r0, #1
 8001d38:	d14a      	bne.n	8001dd0 <_printf_i+0x1f0>
 8001d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d3e:	b004      	add	sp, #16
 8001d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	f043 0320 	orr.w	r3, r3, #32
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	4832      	ldr	r0, [pc, #200]	@ (8001e18 <_printf_i+0x238>)
 8001d4e:	2778      	movs	r7, #120	@ 0x78
 8001d50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	6831      	ldr	r1, [r6, #0]
 8001d58:	061f      	lsls	r7, r3, #24
 8001d5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d5e:	d402      	bmi.n	8001d66 <_printf_i+0x186>
 8001d60:	065f      	lsls	r7, r3, #25
 8001d62:	bf48      	it	mi
 8001d64:	b2ad      	uxthmi	r5, r5
 8001d66:	6031      	str	r1, [r6, #0]
 8001d68:	07d9      	lsls	r1, r3, #31
 8001d6a:	bf44      	itt	mi
 8001d6c:	f043 0320 	orrmi.w	r3, r3, #32
 8001d70:	6023      	strmi	r3, [r4, #0]
 8001d72:	b11d      	cbz	r5, 8001d7c <_printf_i+0x19c>
 8001d74:	2310      	movs	r3, #16
 8001d76:	e7ad      	b.n	8001cd4 <_printf_i+0xf4>
 8001d78:	4826      	ldr	r0, [pc, #152]	@ (8001e14 <_printf_i+0x234>)
 8001d7a:	e7e9      	b.n	8001d50 <_printf_i+0x170>
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	f023 0320 	bic.w	r3, r3, #32
 8001d82:	6023      	str	r3, [r4, #0]
 8001d84:	e7f6      	b.n	8001d74 <_printf_i+0x194>
 8001d86:	4616      	mov	r6, r2
 8001d88:	e7bd      	b.n	8001d06 <_printf_i+0x126>
 8001d8a:	6833      	ldr	r3, [r6, #0]
 8001d8c:	6825      	ldr	r5, [r4, #0]
 8001d8e:	6961      	ldr	r1, [r4, #20]
 8001d90:	1d18      	adds	r0, r3, #4
 8001d92:	6030      	str	r0, [r6, #0]
 8001d94:	062e      	lsls	r6, r5, #24
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	d501      	bpl.n	8001d9e <_printf_i+0x1be>
 8001d9a:	6019      	str	r1, [r3, #0]
 8001d9c:	e002      	b.n	8001da4 <_printf_i+0x1c4>
 8001d9e:	0668      	lsls	r0, r5, #25
 8001da0:	d5fb      	bpl.n	8001d9a <_printf_i+0x1ba>
 8001da2:	8019      	strh	r1, [r3, #0]
 8001da4:	2300      	movs	r3, #0
 8001da6:	6123      	str	r3, [r4, #16]
 8001da8:	4616      	mov	r6, r2
 8001daa:	e7bc      	b.n	8001d26 <_printf_i+0x146>
 8001dac:	6833      	ldr	r3, [r6, #0]
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	6032      	str	r2, [r6, #0]
 8001db2:	681e      	ldr	r6, [r3, #0]
 8001db4:	6862      	ldr	r2, [r4, #4]
 8001db6:	2100      	movs	r1, #0
 8001db8:	4630      	mov	r0, r6
 8001dba:	f7fe fa09 	bl	80001d0 <memchr>
 8001dbe:	b108      	cbz	r0, 8001dc4 <_printf_i+0x1e4>
 8001dc0:	1b80      	subs	r0, r0, r6
 8001dc2:	6060      	str	r0, [r4, #4]
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	6123      	str	r3, [r4, #16]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dce:	e7aa      	b.n	8001d26 <_printf_i+0x146>
 8001dd0:	6923      	ldr	r3, [r4, #16]
 8001dd2:	4632      	mov	r2, r6
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	47d0      	blx	sl
 8001dda:	3001      	adds	r0, #1
 8001ddc:	d0ad      	beq.n	8001d3a <_printf_i+0x15a>
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	079b      	lsls	r3, r3, #30
 8001de2:	d413      	bmi.n	8001e0c <_printf_i+0x22c>
 8001de4:	68e0      	ldr	r0, [r4, #12]
 8001de6:	9b03      	ldr	r3, [sp, #12]
 8001de8:	4298      	cmp	r0, r3
 8001dea:	bfb8      	it	lt
 8001dec:	4618      	movlt	r0, r3
 8001dee:	e7a6      	b.n	8001d3e <_printf_i+0x15e>
 8001df0:	2301      	movs	r3, #1
 8001df2:	4632      	mov	r2, r6
 8001df4:	4649      	mov	r1, r9
 8001df6:	4640      	mov	r0, r8
 8001df8:	47d0      	blx	sl
 8001dfa:	3001      	adds	r0, #1
 8001dfc:	d09d      	beq.n	8001d3a <_printf_i+0x15a>
 8001dfe:	3501      	adds	r5, #1
 8001e00:	68e3      	ldr	r3, [r4, #12]
 8001e02:	9903      	ldr	r1, [sp, #12]
 8001e04:	1a5b      	subs	r3, r3, r1
 8001e06:	42ab      	cmp	r3, r5
 8001e08:	dcf2      	bgt.n	8001df0 <_printf_i+0x210>
 8001e0a:	e7eb      	b.n	8001de4 <_printf_i+0x204>
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	f104 0619 	add.w	r6, r4, #25
 8001e12:	e7f5      	b.n	8001e00 <_printf_i+0x220>
 8001e14:	08002340 	.word	0x08002340
 8001e18:	08002351 	.word	0x08002351

08001e1c <__sflush_r>:
 8001e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e24:	0716      	lsls	r6, r2, #28
 8001e26:	4605      	mov	r5, r0
 8001e28:	460c      	mov	r4, r1
 8001e2a:	d454      	bmi.n	8001ed6 <__sflush_r+0xba>
 8001e2c:	684b      	ldr	r3, [r1, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	dc02      	bgt.n	8001e38 <__sflush_r+0x1c>
 8001e32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	dd48      	ble.n	8001eca <__sflush_r+0xae>
 8001e38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e3a:	2e00      	cmp	r6, #0
 8001e3c:	d045      	beq.n	8001eca <__sflush_r+0xae>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e44:	682f      	ldr	r7, [r5, #0]
 8001e46:	6a21      	ldr	r1, [r4, #32]
 8001e48:	602b      	str	r3, [r5, #0]
 8001e4a:	d030      	beq.n	8001eae <__sflush_r+0x92>
 8001e4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	0759      	lsls	r1, r3, #29
 8001e52:	d505      	bpl.n	8001e60 <__sflush_r+0x44>
 8001e54:	6863      	ldr	r3, [r4, #4]
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e5a:	b10b      	cbz	r3, 8001e60 <__sflush_r+0x44>
 8001e5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e5e:	1ad2      	subs	r2, r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e64:	6a21      	ldr	r1, [r4, #32]
 8001e66:	4628      	mov	r0, r5
 8001e68:	47b0      	blx	r6
 8001e6a:	1c43      	adds	r3, r0, #1
 8001e6c:	89a3      	ldrh	r3, [r4, #12]
 8001e6e:	d106      	bne.n	8001e7e <__sflush_r+0x62>
 8001e70:	6829      	ldr	r1, [r5, #0]
 8001e72:	291d      	cmp	r1, #29
 8001e74:	d82b      	bhi.n	8001ece <__sflush_r+0xb2>
 8001e76:	4a2a      	ldr	r2, [pc, #168]	@ (8001f20 <__sflush_r+0x104>)
 8001e78:	40ca      	lsrs	r2, r1
 8001e7a:	07d6      	lsls	r6, r2, #31
 8001e7c:	d527      	bpl.n	8001ece <__sflush_r+0xb2>
 8001e7e:	2200      	movs	r2, #0
 8001e80:	6062      	str	r2, [r4, #4]
 8001e82:	04d9      	lsls	r1, r3, #19
 8001e84:	6922      	ldr	r2, [r4, #16]
 8001e86:	6022      	str	r2, [r4, #0]
 8001e88:	d504      	bpl.n	8001e94 <__sflush_r+0x78>
 8001e8a:	1c42      	adds	r2, r0, #1
 8001e8c:	d101      	bne.n	8001e92 <__sflush_r+0x76>
 8001e8e:	682b      	ldr	r3, [r5, #0]
 8001e90:	b903      	cbnz	r3, 8001e94 <__sflush_r+0x78>
 8001e92:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e96:	602f      	str	r7, [r5, #0]
 8001e98:	b1b9      	cbz	r1, 8001eca <__sflush_r+0xae>
 8001e9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e9e:	4299      	cmp	r1, r3
 8001ea0:	d002      	beq.n	8001ea8 <__sflush_r+0x8c>
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	f7ff fbec 	bl	8001680 <_free_r>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8001eac:	e00d      	b.n	8001eca <__sflush_r+0xae>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	47b0      	blx	r6
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	1c50      	adds	r0, r2, #1
 8001eb8:	d1c9      	bne.n	8001e4e <__sflush_r+0x32>
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0c6      	beq.n	8001e4e <__sflush_r+0x32>
 8001ec0:	2b1d      	cmp	r3, #29
 8001ec2:	d001      	beq.n	8001ec8 <__sflush_r+0xac>
 8001ec4:	2b16      	cmp	r3, #22
 8001ec6:	d11e      	bne.n	8001f06 <__sflush_r+0xea>
 8001ec8:	602f      	str	r7, [r5, #0]
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e022      	b.n	8001f14 <__sflush_r+0xf8>
 8001ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	e01b      	b.n	8001f0e <__sflush_r+0xf2>
 8001ed6:	690f      	ldr	r7, [r1, #16]
 8001ed8:	2f00      	cmp	r7, #0
 8001eda:	d0f6      	beq.n	8001eca <__sflush_r+0xae>
 8001edc:	0793      	lsls	r3, r2, #30
 8001ede:	680e      	ldr	r6, [r1, #0]
 8001ee0:	bf08      	it	eq
 8001ee2:	694b      	ldreq	r3, [r1, #20]
 8001ee4:	600f      	str	r7, [r1, #0]
 8001ee6:	bf18      	it	ne
 8001ee8:	2300      	movne	r3, #0
 8001eea:	eba6 0807 	sub.w	r8, r6, r7
 8001eee:	608b      	str	r3, [r1, #8]
 8001ef0:	f1b8 0f00 	cmp.w	r8, #0
 8001ef4:	dde9      	ble.n	8001eca <__sflush_r+0xae>
 8001ef6:	6a21      	ldr	r1, [r4, #32]
 8001ef8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001efa:	4643      	mov	r3, r8
 8001efc:	463a      	mov	r2, r7
 8001efe:	4628      	mov	r0, r5
 8001f00:	47b0      	blx	r6
 8001f02:	2800      	cmp	r0, #0
 8001f04:	dc08      	bgt.n	8001f18 <__sflush_r+0xfc>
 8001f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f0e:	81a3      	strh	r3, [r4, #12]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f18:	4407      	add	r7, r0
 8001f1a:	eba8 0800 	sub.w	r8, r8, r0
 8001f1e:	e7e7      	b.n	8001ef0 <__sflush_r+0xd4>
 8001f20:	20400001 	.word	0x20400001

08001f24 <_fflush_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	690b      	ldr	r3, [r1, #16]
 8001f28:	4605      	mov	r5, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	b913      	cbnz	r3, 8001f34 <_fflush_r+0x10>
 8001f2e:	2500      	movs	r5, #0
 8001f30:	4628      	mov	r0, r5
 8001f32:	bd38      	pop	{r3, r4, r5, pc}
 8001f34:	b118      	cbz	r0, 8001f3e <_fflush_r+0x1a>
 8001f36:	6a03      	ldr	r3, [r0, #32]
 8001f38:	b90b      	cbnz	r3, 8001f3e <_fflush_r+0x1a>
 8001f3a:	f7ff f989 	bl	8001250 <__sinit>
 8001f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f3      	beq.n	8001f2e <_fflush_r+0xa>
 8001f46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f48:	07d0      	lsls	r0, r2, #31
 8001f4a:	d404      	bmi.n	8001f56 <_fflush_r+0x32>
 8001f4c:	0599      	lsls	r1, r3, #22
 8001f4e:	d402      	bmi.n	8001f56 <_fflush_r+0x32>
 8001f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f52:	f7ff fb74 	bl	800163e <__retarget_lock_acquire_recursive>
 8001f56:	4628      	mov	r0, r5
 8001f58:	4621      	mov	r1, r4
 8001f5a:	f7ff ff5f 	bl	8001e1c <__sflush_r>
 8001f5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f60:	07da      	lsls	r2, r3, #31
 8001f62:	4605      	mov	r5, r0
 8001f64:	d4e4      	bmi.n	8001f30 <_fflush_r+0xc>
 8001f66:	89a3      	ldrh	r3, [r4, #12]
 8001f68:	059b      	lsls	r3, r3, #22
 8001f6a:	d4e1      	bmi.n	8001f30 <_fflush_r+0xc>
 8001f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f6e:	f7ff fb67 	bl	8001640 <__retarget_lock_release_recursive>
 8001f72:	e7dd      	b.n	8001f30 <_fflush_r+0xc>

08001f74 <fiprintf>:
 8001f74:	b40e      	push	{r1, r2, r3}
 8001f76:	b503      	push	{r0, r1, lr}
 8001f78:	4601      	mov	r1, r0
 8001f7a:	ab03      	add	r3, sp, #12
 8001f7c:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <fiprintf+0x20>)
 8001f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f82:	6800      	ldr	r0, [r0, #0]
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	f7ff fca5 	bl	80018d4 <_vfiprintf_r>
 8001f8a:	b002      	add	sp, #8
 8001f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f90:	b003      	add	sp, #12
 8001f92:	4770      	bx	lr
 8001f94:	20000010 	.word	0x20000010

08001f98 <__swhatbuf_r>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	b096      	sub	sp, #88	@ 0x58
 8001fa4:	4615      	mov	r5, r2
 8001fa6:	461e      	mov	r6, r3
 8001fa8:	da0d      	bge.n	8001fc6 <__swhatbuf_r+0x2e>
 8001faa:	89a3      	ldrh	r3, [r4, #12]
 8001fac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fb0:	f04f 0100 	mov.w	r1, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2340      	movne	r3, #64	@ 0x40
 8001fb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	6031      	str	r1, [r6, #0]
 8001fc0:	602b      	str	r3, [r5, #0]
 8001fc2:	b016      	add	sp, #88	@ 0x58
 8001fc4:	bd70      	pop	{r4, r5, r6, pc}
 8001fc6:	466a      	mov	r2, sp
 8001fc8:	f000 f848 	bl	800205c <_fstat_r>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	dbec      	blt.n	8001faa <__swhatbuf_r+0x12>
 8001fd0:	9901      	ldr	r1, [sp, #4]
 8001fd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fda:	4259      	negs	r1, r3
 8001fdc:	4159      	adcs	r1, r3
 8001fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe2:	e7eb      	b.n	8001fbc <__swhatbuf_r+0x24>

08001fe4 <__smakebuf_r>:
 8001fe4:	898b      	ldrh	r3, [r1, #12]
 8001fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fe8:	079d      	lsls	r5, r3, #30
 8001fea:	4606      	mov	r6, r0
 8001fec:	460c      	mov	r4, r1
 8001fee:	d507      	bpl.n	8002000 <__smakebuf_r+0x1c>
 8001ff0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ff4:	6023      	str	r3, [r4, #0]
 8001ff6:	6123      	str	r3, [r4, #16]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	6163      	str	r3, [r4, #20]
 8001ffc:	b003      	add	sp, #12
 8001ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002000:	ab01      	add	r3, sp, #4
 8002002:	466a      	mov	r2, sp
 8002004:	f7ff ffc8 	bl	8001f98 <__swhatbuf_r>
 8002008:	9f00      	ldr	r7, [sp, #0]
 800200a:	4605      	mov	r5, r0
 800200c:	4639      	mov	r1, r7
 800200e:	4630      	mov	r0, r6
 8002010:	f7ff fbaa 	bl	8001768 <_malloc_r>
 8002014:	b948      	cbnz	r0, 800202a <__smakebuf_r+0x46>
 8002016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800201a:	059a      	lsls	r2, r3, #22
 800201c:	d4ee      	bmi.n	8001ffc <__smakebuf_r+0x18>
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	81a3      	strh	r3, [r4, #12]
 8002028:	e7e2      	b.n	8001ff0 <__smakebuf_r+0xc>
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	6020      	str	r0, [r4, #0]
 800202e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002032:	81a3      	strh	r3, [r4, #12]
 8002034:	9b01      	ldr	r3, [sp, #4]
 8002036:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800203a:	b15b      	cbz	r3, 8002054 <__smakebuf_r+0x70>
 800203c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002040:	4630      	mov	r0, r6
 8002042:	f000 f81d 	bl	8002080 <_isatty_r>
 8002046:	b128      	cbz	r0, 8002054 <__smakebuf_r+0x70>
 8002048:	89a3      	ldrh	r3, [r4, #12]
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	81a3      	strh	r3, [r4, #12]
 8002054:	89a3      	ldrh	r3, [r4, #12]
 8002056:	431d      	orrs	r5, r3
 8002058:	81a5      	strh	r5, [r4, #12]
 800205a:	e7cf      	b.n	8001ffc <__smakebuf_r+0x18>

0800205c <_fstat_r>:
 800205c:	b538      	push	{r3, r4, r5, lr}
 800205e:	4d07      	ldr	r5, [pc, #28]	@ (800207c <_fstat_r+0x20>)
 8002060:	2300      	movs	r3, #0
 8002062:	4604      	mov	r4, r0
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	602b      	str	r3, [r5, #0]
 800206a:	f7fe ff5e 	bl	8000f2a <_fstat>
 800206e:	1c43      	adds	r3, r0, #1
 8002070:	d102      	bne.n	8002078 <_fstat_r+0x1c>
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	b103      	cbz	r3, 8002078 <_fstat_r+0x1c>
 8002076:	6023      	str	r3, [r4, #0]
 8002078:	bd38      	pop	{r3, r4, r5, pc}
 800207a:	bf00      	nop
 800207c:	20000218 	.word	0x20000218

08002080 <_isatty_r>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4d06      	ldr	r5, [pc, #24]	@ (800209c <_isatty_r+0x1c>)
 8002084:	2300      	movs	r3, #0
 8002086:	4604      	mov	r4, r0
 8002088:	4608      	mov	r0, r1
 800208a:	602b      	str	r3, [r5, #0]
 800208c:	f7fe ff5d 	bl	8000f4a <_isatty>
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	d102      	bne.n	800209a <_isatty_r+0x1a>
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	b103      	cbz	r3, 800209a <_isatty_r+0x1a>
 8002098:	6023      	str	r3, [r4, #0]
 800209a:	bd38      	pop	{r3, r4, r5, pc}
 800209c:	20000218 	.word	0x20000218

080020a0 <_sbrk_r>:
 80020a0:	b538      	push	{r3, r4, r5, lr}
 80020a2:	4d06      	ldr	r5, [pc, #24]	@ (80020bc <_sbrk_r+0x1c>)
 80020a4:	2300      	movs	r3, #0
 80020a6:	4604      	mov	r4, r0
 80020a8:	4608      	mov	r0, r1
 80020aa:	602b      	str	r3, [r5, #0]
 80020ac:	f7fe ff66 	bl	8000f7c <_sbrk>
 80020b0:	1c43      	adds	r3, r0, #1
 80020b2:	d102      	bne.n	80020ba <_sbrk_r+0x1a>
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	b103      	cbz	r3, 80020ba <_sbrk_r+0x1a>
 80020b8:	6023      	str	r3, [r4, #0]
 80020ba:	bd38      	pop	{r3, r4, r5, pc}
 80020bc:	20000218 	.word	0x20000218

080020c0 <abort>:
 80020c0:	b508      	push	{r3, lr}
 80020c2:	2006      	movs	r0, #6
 80020c4:	f000 f82c 	bl	8002120 <raise>
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7fe fefa 	bl	8000ec2 <_exit>

080020ce <_raise_r>:
 80020ce:	291f      	cmp	r1, #31
 80020d0:	b538      	push	{r3, r4, r5, lr}
 80020d2:	4605      	mov	r5, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	d904      	bls.n	80020e2 <_raise_r+0x14>
 80020d8:	2316      	movs	r3, #22
 80020da:	6003      	str	r3, [r0, #0]
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020e0:	bd38      	pop	{r3, r4, r5, pc}
 80020e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80020e4:	b112      	cbz	r2, 80020ec <_raise_r+0x1e>
 80020e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80020ea:	b94b      	cbnz	r3, 8002100 <_raise_r+0x32>
 80020ec:	4628      	mov	r0, r5
 80020ee:	f000 f831 	bl	8002154 <_getpid_r>
 80020f2:	4622      	mov	r2, r4
 80020f4:	4601      	mov	r1, r0
 80020f6:	4628      	mov	r0, r5
 80020f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020fc:	f000 b818 	b.w	8002130 <_kill_r>
 8002100:	2b01      	cmp	r3, #1
 8002102:	d00a      	beq.n	800211a <_raise_r+0x4c>
 8002104:	1c59      	adds	r1, r3, #1
 8002106:	d103      	bne.n	8002110 <_raise_r+0x42>
 8002108:	2316      	movs	r3, #22
 800210a:	6003      	str	r3, [r0, #0]
 800210c:	2001      	movs	r0, #1
 800210e:	e7e7      	b.n	80020e0 <_raise_r+0x12>
 8002110:	2100      	movs	r1, #0
 8002112:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002116:	4620      	mov	r0, r4
 8002118:	4798      	blx	r3
 800211a:	2000      	movs	r0, #0
 800211c:	e7e0      	b.n	80020e0 <_raise_r+0x12>
	...

08002120 <raise>:
 8002120:	4b02      	ldr	r3, [pc, #8]	@ (800212c <raise+0xc>)
 8002122:	4601      	mov	r1, r0
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f7ff bfd2 	b.w	80020ce <_raise_r>
 800212a:	bf00      	nop
 800212c:	20000010 	.word	0x20000010

08002130 <_kill_r>:
 8002130:	b538      	push	{r3, r4, r5, lr}
 8002132:	4d07      	ldr	r5, [pc, #28]	@ (8002150 <_kill_r+0x20>)
 8002134:	2300      	movs	r3, #0
 8002136:	4604      	mov	r4, r0
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	602b      	str	r3, [r5, #0]
 800213e:	f7fe feb0 	bl	8000ea2 <_kill>
 8002142:	1c43      	adds	r3, r0, #1
 8002144:	d102      	bne.n	800214c <_kill_r+0x1c>
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	b103      	cbz	r3, 800214c <_kill_r+0x1c>
 800214a:	6023      	str	r3, [r4, #0]
 800214c:	bd38      	pop	{r3, r4, r5, pc}
 800214e:	bf00      	nop
 8002150:	20000218 	.word	0x20000218

08002154 <_getpid_r>:
 8002154:	f7fe be9d 	b.w	8000e92 <_getpid>

08002158 <_init>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	bf00      	nop
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr

08002164 <_fini>:
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	bf00      	nop
 8002168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216a:	bc08      	pop	{r3}
 800216c:	469e      	mov	lr, r3
 800216e:	4770      	bx	lr
